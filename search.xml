<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Actions</title>
    <url>/blog/posts/3405105267.html</url>
    <content><![CDATA[<h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>持续集成、持续部署</p>
]]></content>
  </entry>
  <entry>
    <title>D8调试工具——jsvu的使用细则</title>
    <url>/blog/posts/1327063303.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/d8/"><code>d8</code></a> is V8’s own developer shell.</p>
<p>D8 是一个非常有用的调试工具，你可以把它看成是 debug for V8 的缩写。我们可以使用 d8 来查看 V8 在执行 JavaScript 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 d8 提供的私有 API 查看一些内部信息。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/GoogleChromeLabs/jsvu">jsvu</a> 是 JavaScript 引擎版本管理工具</p>
<p>以下是在Windows10下的操作，建议在 CMD 窗口里面操作。</p>
<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>前提：node V14+</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g jsvu</span><br></pre></td></tr></table></figure>

<p>运行 jsvu，交互式命令行选择需要安装的平台和引擎</p>
<blockquote>
<p>安装指定版本的引擎可以参考下面的命令</p>
<p><code>jsvu --os=win64 --engines=v8,v8-debug</code></p>
</blockquote>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec1bc890f23c4bf0a1e35ad19c19a71a~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>执行 jsvu安装引擎，可在 <em>%USERPROFILE%</em> <em>&#x2F;.jsvu</em> 目录下查看安装的引擎</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c578fcbdc094598aa80fcd39bb99097~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>安装 v8-debug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsvu --os=win64 --engines=v8-debug</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4012a84ed1af4d818829669dbf3271a7~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="操作系统支持的引擎"><a href="#操作系统支持的引擎" class="headerlink" title="操作系统支持的引擎"></a>操作系统支持的引擎</h3><table>
<thead>
<tr>
<th><strong>JavaScript engine</strong></th>
<th><strong>Binary name</strong></th>
<th><strong>mac64</strong></th>
<th><strong>mac64arm</strong></th>
<th><strong>win32</strong></th>
<th><strong>win64</strong></th>
<th><strong>linux32</strong></th>
<th><strong>linux64</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Microsoft/ChakraCore/issues/2278#issuecomment-277301120">Chakra</a></td>
<td>chakra or ch</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/oracle/graaljs">GraalJS</a></td>
<td>graaljs</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/hermes/issues/17">Hermes</a></td>
<td>hermes &amp; hermes-repl</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.webkit.org/show_bug.cgi?id=179945">JavaScriptCore</a></td>
<td>javascriptcore or jsc</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>✅ *</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/GoogleChromeLabs/jsvu/issues/73">QuickJS</a></td>
<td>quickjs</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1336514">SpiderMonkey</a></td>
<td>spidermonkey or sm</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=936383">V8</a></td>
<td>v8</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=936383">V8 debug</a></td>
<td>v8-debug</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/Moddable-OpenSource/moddable-xst">XS</a></td>
<td>xs</td>
<td>✅ (32)</td>
<td>❌</td>
<td>✅</td>
<td>✅ (32)</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody></table>
<h3 id="查看jsvu版本"><a href="#查看jsvu版本" class="headerlink" title="查看jsvu版本"></a>查看jsvu版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsvu -h</span><br><span class="line"></span><br><span class="line">📦 jsvu v1.13.3 — the JavaScript engine Version Updater 📦</span><br><span class="line">[&lt;engine&gt;@&lt;version&gt;]</span><br><span class="line">[--os=&#123;mac64,mac64arm,linux32,linux64,win32,win64,default&#125;]</span><br><span class="line">[--engines=&#123;chakra,graaljs,hermes,javascriptcore,quickjs,spidermonkey,v8,v8-debug,xs&#125;,…]</span><br><span class="line"></span><br><span class="line">Complete documentation is online:</span><br><span class="line">https://github.com/GoogleChromeLabs/jsvu#readme</span><br></pre></td></tr></table></figure>

<h2 id="2、安装-eshost-cli（这个不安装也不影响使用）"><a href="#2、安装-eshost-cli（这个不安装也不影响使用）" class="headerlink" title="2、安装 eshost-cli（这个不安装也不影响使用）"></a>2、安装 <a href="https://github.com/bterlson/eshost-cli">eshost-cli</a>（这个不安装也不影响使用）</h2><p>管理js引擎，可以调用多个引擎执行js代码，更加方便调试不同引擎下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g eshost-cli</span><br></pre></td></tr></table></figure>

<h3 id="Windows-下配置"><a href="#Windows-下配置" class="headerlink" title="Windows 下配置"></a>Windows 下配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eshost --add &lt;host name&gt; &lt;host type&gt; &lt;host path&gt; --args &lt;optional arguments&gt;</span><br></pre></td></tr></table></figure>

<p>根据需要使用的引擎，自行配置，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eshost --add &quot;Chakra&quot; ch &quot;%USERPROFILE%.jsvu\chakra.cmd&quot;</span><br><span class="line">eshost --add &quot;GraalJS&quot; graaljs &quot;%USERPROFILE%.jsvu\graaljs.cmd&quot;</span><br><span class="line">eshost --add &quot;JavaScriptCore&quot; jsc &quot;%USERPROFILE%.jsvu\javascriptcore.cmd&quot;</span><br><span class="line">eshost --add &quot;SpiderMonkey&quot; jsshell &quot;%USERPROFILE%.jsvu\spidermonkey.cmd&quot;</span><br><span class="line">eshost --add &quot;V8 --harmony&quot; d8 &quot;%USERPROFILE%.jsvu\v8.cmd&quot; --args &quot;--harmony&quot;</span><br><span class="line">eshost --add &quot;V8&quot; d8 &quot;%USERPROFILE%.jsvu\v8.cmd&quot;</span><br><span class="line">eshost --add &quot;XS&quot; xs &quot;%USERPROFILE%.jsvu\xs.cmd&quot;</span><br></pre></td></tr></table></figure>

<p>这里我个人配置如下（有没有这个配置貌似没什么影响，）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eshost --add &quot;V8&quot; d8 &quot;C:\Users\xiao.jsvu\v8.cmd&quot;</span><br><span class="line">eshost --add &quot;V8-debug&quot; d8 &quot;C:\Users\xiao.jsvu\v8-debug.cmd&quot;</span><br><span class="line">eshost --add &quot;V8 --harmony&quot; d8 &quot;C:\Users\xiao.jsvu\v8.cmd&quot; --args &quot;--harmony&quot;</span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xiao.jsvu&gt;eshost --configure-jsvu</span><br><span class="line">Using config &quot;C:\Users\xiao.eshost-config.json&quot;</span><br><span class="line">┌──────────────┬──────┬──────────────────────────────────┬───────────┬─────────────┐</span><br><span class="line">│ name         │ type │ path                             │ args      │ tags        │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ ChakraCore   │ ch   │ C:\Users\xiao.jsvu\chakra.cmd   │           │ 1.11.24,web │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8 --harmony │ d8   │ C:\Users\xiao.jsvu\v8.cmd       │ --harmony │             │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8           │ d8   │ C:\Users\xiao.jsvu\v8.cmd       │           │             │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8-debug     │ d8   │ C:\Users\xiao.jsvu\v8-debug.cmd │           │             │</span><br><span class="line">└──────────────┴──────┴──────────────────────────────────┴───────────┴─────────────┘</span><br><span class="line"></span><br><span class="line">C:\Users\xiao.jsvu&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23fed6bc37864292bfc7bad09af4374e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>有大佬知道上面问题在哪，麻烦您指点一下，感谢😊</p>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol>
<li><p>%USERPROFILE% &#x3D;C:\Users\用户名</p>
<p>win+r，输入cmd 回车</p>
<p>在cmd窗口下输入 set 回车，可以查看系统变量（想要了解更多 set 命令请看👉 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1">这里</a>）</p>
</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a47c2e7fd614e39ac078bd9cd0d1dbb~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="3、先简单了解一下抽象语法树"><a href="#3、先简单了解一下抽象语法树" class="headerlink" title="3、先简单了解一下抽象语法树"></a>3、先简单了解一下抽象语法树</h2><p>在传统的编译语言的流程中，程序的一段源代码在执行之前会经历三个步骤，统称为”编译”:</p>
<ol>
<li>分词&#x2F;词法分析</li>
</ol>
<p>这个过程会将由字符组成的字符串<strong>分解</strong>成有意义的代码块，这些代码块统称为<strong>词法单元</strong>(token)</p>
<p>举个例子: let a &#x3D; 1; 这段程序通常会被分解成为下面这些词法单元: let 、a、&#x3D;、1、 ；空格是否被当成词法单元，取决于空格在这门语言中的意义。</p>
<ol start="2">
<li>解析&#x2F;语法分析</li>
</ol>
<p>这个过程是将词法单元流转换成一个由元素嵌套所组成的代表了<strong>程序语法结构</strong>的树，这个树被称为”抽象语法树”（abstract syntax code，AST）</p>
<ol start="3">
<li>代码生成</li>
</ol>
<p>将AST转换成可执行代码的过程被称为代码生成。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86f054da794c45cbac28b645ce4eb9ef~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p align=center>图片来源网络（侵删）</p>

<p>下面看一下<a href="https://astexplorer.net/">在线解析AST</a>的示例👇<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/301453d0b408409fbfbbb02511725bf9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="4、使用V8调试分析代码"><a href="#4、使用V8调试分析代码" class="headerlink" title="4、使用V8调试分析代码"></a>4、使用V8调试分析代码</h2><h3 id="文档查看"><a href="#文档查看" class="headerlink" title="文档查看"></a>文档查看</h3><p>由于文档较长，可以使用命令输出一份本地的帮助文档，方便查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到要输出文档的目录下，生成v8-help.txt、v8-debug-help.txt</span></span><br><span class="line"></span><br><span class="line">v8 --<span class="built_in">help</span> &gt;&gt; v8-help.txt</span><br><span class="line">v8-debug --<span class="built_in">help</span> &gt;&gt; v8-debug-help.txt</span><br></pre></td></tr></table></figure>

<p>主要使用的命令参数如下👇</p>
<p><code>v8-debug --help</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Synopsis:</span><br><span class="line">  shell [options] [--shell] [&lt;file&gt;...]</span><br><span class="line">  d8 [options] [-e &lt;string&gt;] [--shell] [[--module|--web-snapshot] &lt;file&gt;...]</span><br><span class="line"></span><br><span class="line">  -e        execute a string <span class="keyword">in</span> V8</span><br><span class="line">  --shell   run an interactive JavaScript shell</span><br><span class="line">  --module  execute a file as a JavaScript module</span><br><span class="line">  --web-snapshot  execute a file as a web snapshot</span><br><span class="line"></span><br><span class="line">SSE3=1 SSSE3=1 SSE4_1=1 SSE4_2=1 SAHF=1 AVX=1 AVX2=1 FMA3=1 BMI1=1 BMI2=1 LZCNT=1 POPCNT=1 ATOM=0</span><br><span class="line">The following syntax <span class="keyword">for</span> options is accepted (both <span class="string">&#x27;-&#x27;</span> and <span class="string">&#x27;--&#x27;</span> are ok):</span><br><span class="line">  --flag        (bool flags only)</span><br><span class="line">  --no-flag     (bool flags only)</span><br><span class="line">  --flag=value  (non-bool flags only, no spaces around <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">  --flag value  (non-bool flags only)</span><br><span class="line">  --            (captures all remaining args <span class="keyword">in</span> JavaScript)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">	<span class="comment"># 打印生成的字节码</span></span><br><span class="line">  --print-bytecode (<span class="built_in">print</span> bytecode generated by ignition interpreter)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-bytecode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 跟踪被优化的信息</span></span><br><span class="line"> 	--trace-opt (trace optimized compilation)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt</span><br><span class="line">  --trace-opt-verbose (extra verbose optimized compilation tracing)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt-verbose</span><br><span class="line">  --trace-opt-stats (trace optimized compilation statistics)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt-stats</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 跟踪去优化的信息</span></span><br><span class="line">  --trace-deopt (trace deoptimization)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-deopt</span><br><span class="line">  --log-deopt (<span class="built_in">log</span> deoptimization)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --nolog-deopt</span><br><span class="line">  --trace-deopt-verbose (extra verbose deoptimization tracing)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-deopt-verbose</span><br><span class="line">  --print-deopt-stress (<span class="built_in">print</span> number of possible deopt points)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看编译生成的 AST</span></span><br><span class="line">  --print-ast (<span class="built_in">print</span> <span class="built_in">source</span> AST)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-ast</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看编译生成的代码</span></span><br><span class="line">  --print-code (<span class="built_in">print</span> generated code)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-code</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看优化后的代码</span></span><br><span class="line">  --print-opt-code (<span class="built_in">print</span> optimized code)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-opt-code</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 允许在源代码中使用 V8 提供的原生 API 语法</span></span><br><span class="line">        <span class="comment"># 在代码中配和加入 %DebugPrint(); 可以查看详细的运行时信息</span></span><br><span class="line">  --allow-natives-syntax (allow natives syntax)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noallow-natives-syntax</span><br></pre></td></tr></table></figure>

<h3 id="4-1、查看-ast"><a href="#4-1、查看-ast" class="headerlink" title="4.1、查看 ast"></a>4.1、查看 ast</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v8-debug -e --print-ast <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<p>接收到代码后，第一步就是“解释”，即解释器生成 AST 和作用域。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-ast <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br><span class="line">[generating bytecode <span class="keyword">for</span> <span class="keyword">function</span>: ]</span><br><span class="line">--- AST ---</span><br><span class="line">FUNC at 0</span><br><span class="line">. KIND 0</span><br><span class="line">. LITERAL ID 0</span><br><span class="line">. SUSPEND COUNT 0</span><br><span class="line">. NAME <span class="string">&quot;&quot;</span></span><br><span class="line">. INFERRED NAME <span class="string">&quot;&quot;</span></span><br><span class="line">. DECLS</span><br><span class="line">. . VARIABLE (000001FA12EFAF80) (mode = CONST, assigned = <span class="literal">false</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">. BLOCK NOCOMPLETIONS at -1</span><br><span class="line">. . EXPRESSION STATEMENT at 11</span><br><span class="line">. . . INIT at 11</span><br><span class="line">. . . . VAR PROXY context[2] (000001FA12EFAF80) (mode = CONST, assigned = <span class="literal">false</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">. . . . LITERAL <span class="string">&quot;xiao&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32a274ef18a6401d8175b4f5e5bc99d3~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="4-2、查看作用域"><a href="#4-2、查看作用域" class="headerlink" title="4.2、查看作用域"></a>4.2、查看作用域</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v8-debug -e --print-scopes <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-scopes <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br><span class="line">Global scope:</span><br><span class="line">global &#123; // (000001DB6010D600) (0, 17)</span><br><span class="line">  // will be compiled</span><br><span class="line">  // NormalFunction</span><br><span class="line">  // 1 stack slots</span><br><span class="line">  // 3 heap slots</span><br><span class="line">  // temporary vars:</span><br><span class="line">  TEMPORARY .result;  // (000001DB6010D910) <span class="built_in">local</span>[0]</span><br><span class="line">  // <span class="built_in">local</span> vars:</span><br><span class="line">  CONST name;  // (000001DB6010D820) context[2], never assigned</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-3、查看生成的字节码"><a href="#4-3、查看生成的字节码" class="headerlink" title="4.3、查看生成的字节码"></a>4.3、查看生成的字节码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v8-debug -e --print-bytecode <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-bytecode <span class="string">&quot;const name=&#x27;xiao&#x27;&quot;</span></span><br><span class="line">[generated bytecode <span class="keyword">for</span> <span class="keyword">function</span>:  (0x0113002538bd &lt;SharedFunctionInfo&gt;)]</span><br><span class="line">Bytecode length: 6</span><br><span class="line">Parameter count 1</span><br><span class="line">Register count 1</span><br><span class="line">Frame size 8</span><br><span class="line">Bytecode age: 0</span><br><span class="line">         000001130025393A @    0 : 13 00             LdaConstant [0]</span><br><span class="line">         000001130025393C @    2 : 25 02             StaCurrentContextSlot [2]</span><br><span class="line">         000001130025393E @    4 : 0e                LdaUndefined</span><br><span class="line">         000001130025393F @    5 : a9                Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">000001130025390D: [FixedArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x011300002229 &lt;Map(FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x0113002538a1 &lt;String[4]: <span class="comment">#xiao&gt;</span></span><br><span class="line">Handler Table (size = 0)</span><br><span class="line">Source Position Table (size = 0)</span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-4、查看详细的运行时信息"><a href="#4-4、查看详细的运行时信息" class="headerlink" title="4.4、查看详细的运行时信息"></a>4.4、查看详细的运行时信息</h3><p>通过 <code>--allow-natives-syntax</code> 参数可以在 JavaScript 中调用 %DebugPrint 底层的 Native API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testV8</span>(<span class="params">properties, elements</span>) &#123;</span><br><span class="line">  <span class="comment">//添加可索引属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i] = <span class="string">`element<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加常规属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> prop = <span class="string">`property<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>[prop] = prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testobj1 = <span class="keyword">new</span> <span class="title function_">testV8</span>(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 testobj1 详细的运行时信息</span></span><br><span class="line">%<span class="title class_">DebugPrint</span>(testobj1);</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v8-debug --allow-natives-syntax .\src\libs\demo.js</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b597a8a32caa4daebe19dc86d9e4e880~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="相关文章一览"><a href="#相关文章一览" class="headerlink" title="相关文章一览"></a>相关文章一览</h2><ul>
<li><p><a href="https://juejin.cn/post/7125763016582234142">V8中的快慢属性</a></p>
</li>
<li><p><a href="https://juejin.cn/post/7126200095543918599">V8中的快慢数组</a></p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker0网络及原理探究</title>
    <url>/blog/posts/2165908694.html</url>
    <content><![CDATA[<blockquote>
<p>个人观点：Docker网络通信在容器编排、集群部署中具有举足轻重的地位，（玩docker不懂docker0那就……玩不透哇👀）本篇分析Docker网络，并通过启动几个容器来探究Docker网络及容器通信，帮助读者理解一下😊。</p>
</blockquote>
<h2 id="1、Docker0"><a href="#1、Docker0" class="headerlink" title="1、Docker0"></a>1、Docker0</h2><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<p>Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置。</p>
<h2 id="2、清空所有镜像"><a href="#2、清空所有镜像" class="headerlink" title="2、清空所有镜像"></a>2、清空所有镜像</h2><p>如果是初学者，还不是很了解docker0的情况下，建议清空所有镜像，创造一个比较干净的容器网络环境，更加清晰，有助于学习docker0😃</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 停掉所有正在运行的容器(否则删除不掉)</span></span><br><span class="line">docker stop [containerID]   <span class="comment"># docker stop $(docker container ls -q)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 执行删除</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h2 id="3、查看网卡信息"><a href="#3、查看网卡信息" class="headerlink" title="3、查看网卡信息"></a>3、查看网卡信息</h2><ol>
<li>先了解一下<code>ip addr</code>命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br><span class="line"></span><br><span class="line">lo        <span class="comment"># 本机回环地址 127.0.0.1</span></span><br><span class="line">eth0      <span class="comment"># 阿里云内网地址 172.31.81.32</span></span><br><span class="line">docker0   <span class="comment"># docker生成的网卡 172.17.0.1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取当前网卡ip地址和mac地址</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:0a:00:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.31.81.32/20 brd 172.31.95.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 291944112sec preferred_lft 291944112sec</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:a4:2f:c5:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面通过docker启动几个容器来探究一下Docker网络👇</p>
</blockquote>
<h2 id="4、运行容器之后，再次查看网卡信息"><a href="#4、运行容器之后，再次查看网卡信息" class="headerlink" title="4、运行容器之后，再次查看网卡信息"></a>4、运行容器之后，再次查看网卡信息</h2><p>安装Docker时，它会<strong>自动创建</strong>三个网络，默认<code>bridge</code>网桥（创建容器默认连接到此网络）、 <code>none</code> 、<code>host</code></p>
<h3 id="4-1、运行mysql01-centos01-centos02容器"><a href="#4-1、运行mysql01-centos01-centos02容器" class="headerlink" title="4.1、运行mysql01, centos01, centos02容器"></a>4.1、运行<code>mysql01</code>, <code>centos01</code>, <code>centos02</code>容器</h3><ul>
<li>启动时，docker默认的bridge网桥，docker0给容器服务自动分配ip</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name mysql01 -e MYSQL_ROOT_PASSWORD=123 mysql:5.7</span><br><span class="line">docker run -it --name centos01  centos /bin/bash</span><br><span class="line">docker run -it --name centos02  centos /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="4-2、查看ip、mac地址信息"><a href="#4-2、查看ip、mac地址信息" class="headerlink" title="4.2、查看ip、mac地址信息"></a>4.2、查看ip、mac地址信息</h3><ul>
<li>可以看到上面启动的三个容器服务的<code>mac</code>信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:0a:00:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.31.81.32/20 brd 172.31.95.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 291916543sec preferred_lft 291916543sec</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:a4:2f:c5:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">140: br-799426d70aa2: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:7f:01:1d:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-799426d70aa2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">154: vethe3da564@if153: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether ea:84:fb:14:47:99 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">156: veth6477da5@if155: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 86:35:30:8d:14:85 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">158: veth17b2712@if157: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 72:76:f0:3c:17:e8 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br></pre></td></tr></table></figure>

<h3 id="4-3、查看docker网络"><a href="#4-3、查看docker网络" class="headerlink" title="4.3、查看docker网络"></a>4.3、查看docker网络</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host      host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none      null      <span class="built_in">local</span></span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4、查看默认bridge网桥-docker0"><a href="#4-4、查看默认bridge网桥-docker0" class="headerlink" title="4.4、查看默认bridge网桥(docker0)"></a>4.4、查看默认bridge网桥(docker0)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network inspect feafa30d4051</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;feafa30d4051f24353508959bd420fd163ad0c98d6b30ec8ff13b59a59552bb1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-09-26T15:10:27.167774553+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;29298987c51b777b546bf6626560020ce235e390e1d7fcfe188c6db228ca4edf&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f6572c49234f74a6c0b652a379bb386f843ebd23b02abd59b1f6a9d1c9534b17&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.2/16&quot;</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;ef6cfa74f56bfa4f49143aa08cf323812002236bc63f75204dee7c3ec1162250&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.3/16&quot;</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;cc6f510b9765ba018dbafd416c9774ddf5fd3ff55fa992827f55516e8dc70b6a&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;2f901aec8f8b455d1fb06112c9035a19f34cc597d8907f26f1b896f12d7eb7ba&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.4/16&quot;</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="4-5、测试容器通信"><a href="#4-5、测试容器通信" class="headerlink" title="4.5、测试容器通信"></a>4.5、测试容器通信</h3><blockquote>
<p>此时，进入<code>centos01</code>容器，<code>ping</code> mysql容器的<code>ip</code>可以ping通，但是ping不通容器名 ❗</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cb1922b95b93 /bin/bash</span><br><span class="line">ping 172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker0不支持容器名连接访问</span></span><br><span class="line">ping mysql01</span><br><span class="line">ping: mysql01: Name or service not known</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run 启动镜像的时候docker都会分配一个网卡地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看运行容器的ip</span></span><br><span class="line">docker inspect 容器ID | grep IPAddress</span><br></pre></td></tr></table></figure>

<p>如下图👇</p>
<p><img src="https://files.mdnice.com/user/34064/322be90a-063f-429b-9241-0293a832757f.png"></p>
<h2 id="5、容器通信原理"><a href="#5、容器通信原理" class="headerlink" title="5、容器通信原理"></a>5、容器通信原理</h2><ul>
<li><p>只要我们安装了docker，就会有一个网卡docker0（相当于一个路由器），每启动一个docker容器，docker都会给docker容器分配一个ip（连接路由器的终端，同一网段下终端可以互相通信），</p>
</li>
<li><p>通过<code>evth-pair</code>技术实现，<code>evth-pair</code>就是一对<em>虚拟设备接口</em>，他们都是成对出现的，一端连着协议，一端彼此相连，<code>evth-pair</code>充当一个桥梁，连接各种虚拟网络设备。</p>
</li>
<li><p>Docker网络使用的是<code>Linux桥接</code>，宿主机是docker容器的网桥，docker0，最多分配65535个</p>
</li>
<li><p>删除容器之后，虚拟网卡就自动消失了。（<strong>虚拟网卡传递效率高！</strong>）</p>
</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/08caee17-aad2-473f-bd89-adafd9a08caf.png"></p>
<p>启动容器不设置网络，容器ip由docker0自动分配情况下，容器间的通信，要经过<code>evth-pair</code>技术实现，<strong>并不是直连的</strong>。(跟计算机网络通信类似，分层模型，TCP&#x2F;IP协议数据报封装解封装)</p>
<p><img src="https://files.mdnice.com/user/34064/05840b3b-e40f-4b39-9a78-78c43838f9dc.png"></p>
<h3 id="5-1、结论"><a href="#5-1、结论" class="headerlink" title="5.1、结论"></a>5.1、结论</h3><ol>
<li><p><code>tomcat01</code>,<code>tomcat02</code>是共用的一个路由器，docker0</p>
</li>
<li><p>所有的容器启动时，如果不指定网络的情况下，都是docker0路由的。65535</p>
</li>
</ol>
<p><img src="https://files.mdnice.com/user/34064/348baac0-815d-4df3-b9b8-fe9dd07c8bfb.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>上面<code>docker0</code>不支持容器名连接访问，容器通信只可以通过容器<code>ip</code>通信，docker也无法保证容器重启后的IP地址不变，所以更好的方式是<strong>通过别名进行互联</strong>，下篇继续讲解怎么通过别名进行容器通信，😊😊。</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>后端运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker网络模型以及容器通信</title>
    <url>/blog/posts/1604561083.html</url>
    <content><![CDATA[<blockquote>
<p>本篇接着上篇：【Docker0网络及原理探究】，继续深入探究容器网络通信原理，通过学习Docker网路驱动模型，更好地解决容器间的通信问题🎉🎉</p>
</blockquote>
<h2 id="1、Docker的网络驱动模型"><a href="#1、Docker的网络驱动模型" class="headerlink" title="1、Docker的网络驱动模型"></a>1、Docker的网络驱动模型</h2><h3 id="1-1、Docker的网络驱动模型分类："><a href="#1-1、Docker的网络驱动模型分类：" class="headerlink" title="1.1、Docker的网络驱动模型分类："></a>1.1、Docker的网络驱动模型分类：</h3><ol>
<li><p><code>bridge</code>：Docker中默认的网络驱动模型，在启动容器时如果不指定则默认为此驱动类型；</p>
</li>
<li><p><code>host</code>：打破Docker容器与宿主机之间的网络隔离，直接使用宿主机的网络环境，该模型仅适用于Docker17.6及以上版本；</p>
</li>
<li><p><code>overlay</code>：可以连接多个docker守护进程或者满足集群服务之间的通信；适用于不同宿主机上的docker容器之间的通信；</p>
</li>
<li><p><code>macvlan</code>：可以为docker容器分配<code>MAC</code>地址，使其像真实的物理机一样运行；</p>
</li>
<li><p><code>none</code>：即禁用了网络驱动，需要自己手动自定义网络驱动配置；</p>
</li>
<li><p><code>plugins</code>：使用第三方网络驱动插件；</p>
</li>
</ol>
<h3 id="1-2、Docker网络模式"><a href="#1-2、Docker网络模式" class="headerlink" title="1.2、Docker网络模式"></a>1.2、Docker网络模式</h3><ul>
<li><strong>查看docker网络</strong> <code>docker network ls</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host      host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none      null      <span class="built_in">local</span></span><br><span class="line">[root@--- ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>Docker内置这三个网络，运行容器时，你可以使用该<code>--network</code>标志来指定容器应连接到哪些网络。</p>
<p>该<code>bridge</code>网络代表<code>docker0</code>所有Docker安装中存在的网络。除非你使用<code>docker run --network=&lt;NETWORK&gt;</code>选项指定，否则Docker守护程序默认将容器连接到此网络。</p>
<p>我们在使用<code>docker run</code>创建Docker容器时，可以用 <code>--net</code> 选项指定容器的网络模式，<strong>Docker可以有以下4种网络模式</strong>：</p>
<ol>
<li><p><code>host模式</code>：使用 <code>--net=host</code> 指定。</p>
</li>
<li><p><code>none模式</code>：使用 <code>--net=none</code> 指定。</p>
</li>
<li><p><code>bridge模式</code>：使用 <code>--net=bridge</code> 指定，默认设置。</p>
</li>
<li><p><code>container模式</code>：使用 <code>--net=container:NAME_or_ID</code> 指定。</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat01 --net=bridge tomcat  <span class="comment"># 默认设置</span></span><br><span class="line">docker run -it -P --name tomcat02 --net=none tomcat</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h2 id="2、容器通信问题"><a href="#2、容器通信问题" class="headerlink" title="2、容器通信问题"></a>2、容器通信问题</h2><ol>
<li><p>由于不同容器通过<code>veth pair</code>连接在虚拟网桥<code>docker0</code>上，所以容器之间可以通过<code>IP</code>互相通信，<strong>但是无法通过容器名进行通信</strong>。docker0不支持容器名连接访问</p>
</li>
<li><p>默认网桥<code>bridge</code>上的容器只能通过IP互连，无法通过<code>DNS</code>解析名称或别名。假如我们在container1中部署了Web服务，在container2中部署了mysql，container1中的Web服务往往需要连接container2的mysql，这是只能靠IP进行连接，但是docker也无法保证容器重启后的IP地址不变，所以更好的方式是通过别名进行互联，在网络中加入DNS服务器，将容器名与IP地址进行匹配，省去了手动修改Web服务中连接mysql的IP的过程。</p>
</li>
</ol>
<p>为了实现不同容器<strong>通过容器名或别名的互连</strong>，docker提供了以下几种：👇</p>
<ol>
<li><p>在启动docker容器时加入<code>--link</code>参数，但是目前已经被废弃，废弃的主要原因是需要在连接的两个容器上都创建–link选项，当互连的容器数量较多时，操作的复杂度会显著增加；</p>
</li>
<li><p>启动docker容器后进入容器并修改 <code>/etc/hosts</code> 配置文件（本地DNS解析），缺点是手动配置较为繁杂；</p>
</li>
<li><p>用户<strong>自定义bridge网桥</strong>，这是目前解决此类问题的主要方法，提供更好的隔离效果和更好的互通性（更好的隔离效果是针对外界网络，而更好的互通性则是指同一<code>bridge</code>下的不同容器之间），用户自定义bridge在容器之间提供了自动DNS解析。</p>
</li>
</ol>
<blockquote>
<p>容器在默认情况下以隔离方式运行，它们完全不知道同一计算机上有其他进程或容器。 那么，如何使容器能够彼此通信？ 答案就是网络连接。 如果两个容器在同一网络上，那么它们可彼此通信。 如果没在同一网络上，则没法通信。</p>
</blockquote>
<h2 id="3、容器之间通信的主要方式总结"><a href="#3、容器之间通信的主要方式总结" class="headerlink" title="3、容器之间通信的主要方式总结"></a>3、容器之间通信的主要方式总结</h2><h3 id="3-1、通过容器ip访问"><a href="#3-1、通过容器ip访问" class="headerlink" title="3.1、通过容器ip访问"></a>3.1、通过容器ip访问</h3><p>容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。</p>
<h3 id="3-2、通过宿主机的ip-port访问"><a href="#3-2、通过宿主机的ip-port访问" class="headerlink" title="3.2、通过宿主机的ip:port访问"></a>3.2、通过宿主机的ip:port访问</h3><p>通过宿主机的<code>ip:port</code>访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。</p>
<h3 id="3-3、通过-link建立连接（官方不推荐使用）"><a href="#3-3、通过-link建立连接（官方不推荐使用）" class="headerlink" title="3.3、通过--link建立连接（官方不推荐使用）"></a>3.3、通过<code>--link</code>建立连接（官方不推荐使用）</h3><p><strong>原理分析：</strong></p>
<ul>
<li><p>运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。</p>
</li>
<li><p>与<code>/etc/hosts</code>中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 <code>/etc/hosts</code>来解析链接容器的IP地址。</p>
</li>
<li><p>除了环境变量之外，Docker还将源容器的主机条目添加到<code>/etc/hosts</code>文件中。(本质上就是通过 <code>--link</code> 参数，自动的给容器添加 <code>hosts</code> 配置)</p>
</li>
</ul>
<p><strong><code>--link</code>建立连接步骤：✨</strong></p>
<ol>
<li>启动tomcat01,tomcat02</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat01 tomcat</span><br><span class="line">docker run -it -P --name tomcat02 tomcat</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p><code>--link</code> 通过配置 <code>/etc/hosts</code> 实现连接</p>
</li>
<li><p>通过<code>link</code>建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。</p>
</li>
<li><p>被链接容器会继承源容器的环境变量信息</p>
</li>
</ul>
</blockquote>
<ol start="2">
<li>建立<code>link</code>连接</li>
</ol>
<p><code>tomcat02</code> 容器 link 到 <code>tomcat03</code> 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat03 --<span class="built_in">link</span> tomcat02 tomcat</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看tomcat03 hosts配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker exec -it tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.3	tomcat02 099602f3ff7f <span class="comment">#✨--link命令配置生成的条目✨</span></span><br><span class="line">172.17.0.4	a20a10b7e728</span><br><span class="line">[root@--- ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h3 id="3-4、🧨通过-User-defined-networks（推荐）"><a href="#3-4、🧨通过-User-defined-networks（推荐）" class="headerlink" title="3.4、🧨通过 User-defined networks（推荐）"></a>3.4、🧨通过 User-defined networks（推荐）</h3><p><strong>用户自定义网桥步骤：✨</strong></p>
<ol>
<li>创建用户自定义bridge网桥</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network create test-network</span></span><br><span class="line">799426d70aa28b73b4a777c85b338186eafadd1558b13c43e07a9fd9a8b545e7</span><br><span class="line">[root@iZm5e23n3ueobwkjtfartxZ ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host           host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none           null      <span class="built_in">local</span></span><br><span class="line">799426d70aa2   test-network   bridge    <span class="built_in">local</span>   <span class="comment">#✨创建的桥接网络✨</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除网桥:  <code>docker network rm test-network</code></p>
</blockquote>
<ol start="2">
<li><p>把之前启动的 mysql01,centos01,centos02 容器加入到自定义bridge网桥中: <code>connect</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network connect test-network mysql01</span><br><span class="line">docker network connect test-network centos01</span><br><span class="line">docker network connect test-network centos02</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看自定义bridge网桥信息</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network inspect 799426d70aa2</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;test-network&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;799426d70aa28b73b4a777c85b338186eafadd1558b13c43e07a9fd9a8b545e7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-10-03T20:30:03.325679562+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.18.0.0/16&quot;</span>,  <span class="comment">#✨test-network的子网✨</span></span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>     <span class="comment">#✨test-network的网关✨</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;29298987c51b777b546bf6626560020ce235e390e1d7fcfe188c6db228ca4edf&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mysql01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;a69560a1872a25af042c74132df5dcade6e0e93faf9102185c1de19f6c8b3b36&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.2/16&quot;</span>,    <span class="comment">#✨mysql01 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f0cf5feb77ec23526fe5cee217dba9271125b9b4106c81bc7d58253ac48a4caf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.3/16&quot;</span>,    <span class="comment">#✨centos01 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;cc6f510b9765ba018dbafd416c9774ddf5fd3ff55fa992827f55516e8dc70b6a&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;6c88540d719014e441d3119c4388e62d311b07acf009106e16aa66d7ebaf5763&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.4/16&quot;</span>,    <span class="comment">#✨centos02 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过容器名或别名互连通信</li>
</ol>
<p>进入centos01容器，<code>ping centos02</code>, <code>ping mysql01</code></p>
<p>可以发现centos01可以和centos02、mysql01容器之间可以通信</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cb1922b95b93 /bin/bash👈</span><br><span class="line">[root@cb1922b95b93 /]<span class="comment"># ping centos02👈</span></span><br><span class="line">PING centos02 (172.18.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos02.test-network (172.18.0.4): icmp_seq=1 ttl=64 time=0.118 ms</span><br><span class="line">64 bytes from centos02.test-network (172.18.0.4): icmp_seq=2 ttl=64 time=0.113 ms</span><br><span class="line">...</span><br><span class="line">ping mysql01👈</span><br><span class="line">PING mysql01 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql01.test-network (172.18.0.2): icmp_seq=1 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from mysql01.test-network (172.18.0.2): icmp_seq=2 ttl=64 time=0.103 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>断开网络</li>
</ol>
<p>由于我们的容器仍然连接着默认bridge网桥docker0，而现在我们已经不需要它，所以应该将容器与docker0的连接断开，执行以下操作<code>disconnect</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network disconnect bridge mysql01</span><br><span class="line">docker network disconnect bridge centos01</span><br><span class="line">docker network disconnect bridge centos02</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看默认bridge网桥docker0的容器网络配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network inspect feafa30d4051👈</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;feafa30d4051f24353508959bd420fd163ad0c98d6b30ec8ff13b59a59552bb1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-09-26T15:10:27.167774553+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,    <span class="comment">#✨之前的容器服务，已经从默认网桥中移除✨</span></span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>了解了Docker网络、容器通信之后，对继续学习服务网格（<code>Service Mesh</code>）与<code>Kubernetes</code>的服务发现有很大帮助。很多的项目架构也都是从网络通信角度进行的层级、模块划分（比如：网路拓扑图、终极系统架构异地多活）。关于网络，学完之后你会发现很多东西都串一块了，超级有意思😊 </p>
<p>微信公众号：【看见另一种可能】</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏程序员😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>后端运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages 站点建设</title>
    <url>/blog/posts/899051033.html</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul>
<li><p>GitHub Pages 是通过 GitHub 托管和发布的公共网页，将纯文本转换为静态博客网站。</p>
</li>
<li><p>您可以使用 GitHub Pages 来展示一些开源项目、博客甚或分享您的简历，有内存限制，可以绑定个人域名。</p>
</li>
<li><p>启动和运行的最快方法是使用 <a href="https://jekyllcn.com/">Jekyll</a> 主题选择器加载预置主题。 然后，您可以修改 GitHub Pages 的内容和样式。👉 <a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/about-github-pages">文档</a></p>
</li>
</ul>
<h2 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h2><p>仓库名： <code>&lt;username&gt;.github.io</code><br><code>username</code> 是GitHub的用户名</p>
<h2 id="3、创建站点"><a href="#3、创建站点" class="headerlink" title="3、创建站点"></a>3、创建站点</h2><p>在 <code>repo</code> 下创建 <code>index.md</code>文件，随便写点东西保存。然后，点击 <code>settings</code>选项卡，单机左侧 <code>Pages</code>进行设置，如下图：</p>
<p><img src="https://files.mdnice.com/user/34064/42531bfd-6a95-4b93-aef1-2132eb036186.png"></p>
<p>🔊 此时站点已经建成，可以访问 <code>https://&lt;username&gt;.github.io/</code> 查看，如果已经有个人域名了，也可以绑定个人域名，继续往下看👇</p>
<h2 id="4、仓库文件目录"><a href="#4、仓库文件目录" class="headerlink" title="4、仓库文件目录"></a>4、仓库文件目录</h2><p><img src="https://files.mdnice.com/user/34064/8f9a125b-767d-45af-b91f-e998f10a2267.png"></p>
<h2 id="5、绑定域名"><a href="#5、绑定域名" class="headerlink" title="5、绑定域名"></a>5、绑定域名</h2><p>我个人购买的一级域名是 i-xiao ，域名后缀是 space，专门给GitHub Pages 增加一个CNAME记录（blog），解析二级域名，绑定 <username>github.io 域名。</p>
<h3 id="5-1、域名相关知识"><a href="#5-1、域名相关知识" class="headerlink" title="5.1、域名相关知识"></a>5.1、域名相关知识</h3><ul>
<li>www：主机名，i-xiao : 域名主体(一级域名)，.space : 域名后缀<br>注册一级域名的时候是需要付费的</li>
<li>二级域名，是依附一级域名的存在而存在的，也就是说要是顶级域名消失了，二级域名也也会不复存在。反而来说，二级域名的网站不做了，主域名网站是不受影响的。</li>
<li>一级域名、二级域名区别：<br>DNS收录一级域名更快；还有就是解析速度，下一跳路由就不说了，找到目的主机之后，二级域名层级更深，需要多一层计算（其实这是我瞎写的🤣，猜测应该跟 nginx location匹配类似）</li>
</ul>
<h3 id="5-2、GitHub上配置自定义域名"><a href="#5-2、GitHub上配置自定义域名" class="headerlink" title="5.2、GitHub上配置自定义域名"></a>5.2、GitHub上配置自定义域名</h3><p>进入 <username>github.io 仓库，进入设置页面，点击左边 Pages 选项卡，进行下面的配置。</p>
<p><img src="https://files.mdnice.com/user/34064/7b148b05-ea65-410c-8bb7-ded42d8f2538.png"></p>
<h2 id="6、配置域名映射"><a href="#6、配置域名映射" class="headerlink" title="6、配置域名映射"></a>6、配置域名映射</h2><p><strong>各记录类型使用目的</strong></p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>使用目的</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9ce5/">A 记录</a></td>
<td>将域名指向一个 IP 地址（外网地址）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9cf9/">CNAME 记录</a></td>
<td>将域名指向另一个域名，再由另一个域名提供 IP 地址（外网地址）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9cff/">MX 记录</a></td>
<td>设置邮箱，让邮箱能收到邮件。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d11/">NS 记录</a></td>
<td>将子域名交给其他 DNS 服务商解析。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d0b/">AAAA 记录</a></td>
<td>将域名指向一个 IPv6 地址。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d17/">SRV 记录</a></td>
<td>用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d05/">TXT 记录</a></td>
<td>对域名进行标识和说明，绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9ced/">隐、显性 URL 记录</a></td>
<td>将一个域名指向另外一个已经存在的站点。</td>
</tr>
</tbody></table>
<p><strong>如下图</strong></p>
<p><img src="https://files.mdnice.com/user/34064/18e6f450-c21d-4db6-9e42-ba21b06b2134.png"></p>
<h2 id="7、DNS检测"><a href="#7、DNS检测" class="headerlink" title="7、DNS检测"></a>7、DNS检测</h2><p><img src="https://files.mdnice.com/user/34064/32c6f3d8-902c-4de9-a544-24f38c98836c.png"></p>
<h2 id="8、查看Pages"><a href="#8、查看Pages" class="headerlink" title="8、查看Pages"></a>8、查看Pages</h2><p>成功解析之后，还存在DNS缓存，一般还需要再等待一会（一般十分钟，或许更长时间）才能生效，如下图成功显示👇</p>
<p><img src="https://files.mdnice.com/user/34064/fbe4c739-db6f-4870-b17f-20207247bd54.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>站点绑定的域名已经更换，访问请到👉 <a href="https://home.i-xiao.space/">这里</a></p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <url>/blog/posts/3616955208.html</url>
    <content><![CDATA[<blockquote>
<p>操作环境：Windows10、Node、Git、ssh</p>
<p>前置准备: <code>&lt;username&gt;github.io</code> 仓库已建立，预计托管博客网址为<code>&lt;username&gt;github.io/blog</code></p>
</blockquote>
<p>先对hexo有个清晰的认识，不至于稀里糊涂的跟着步骤走。</p>
<h1 id="1、Hexo发布博客流程概览"><a href="#1、Hexo发布博客流程概览" class="headerlink" title="1、Hexo发布博客流程概览"></a>1、Hexo发布博客流程概览</h1><ol>
<li><p>搭建hexo环境</p>
</li>
<li><p><code>hexo new &quot;title&quot;</code> (创建新文章)</p>
</li>
<li><p>编写md文档</p>
</li>
<li><p><code>hexo clean</code></p>
</li>
</ol>
<ul>
<li>清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>
</ul>
<ol start="5">
<li><p><code>hexo generate</code> (生成静态文件)</p>
</li>
<li><p><code>hexo deploy</code> (Hexo 会将 public 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。)</p>
</li>
<li><p>本地仓库同步到GitHub (不同步的话，文章源码只会保留在本地，不易管理)</p>
</li>
</ol>
<blockquote>
<p>由于 Hexo 的部署默认使用分支 master，所以如果你同时正在使用 Git 管理你的站点目录，你应当注意你的部署分支应当不同于写作分支。</p>
<p>Hexo 在部署你的站点生成的文件时并不会更新你的站点目录。因此你应该手动提交并推送你的写作分支。</p>
</blockquote>
<p>一般来说第一步环境搭建只需要在最开始创建博客网站的时候进行，写文的话只需要重复第2-7步就可以了，这种使用方式强烈依赖于本地环境。但是，有时候我们并不只是固定在一台电脑上写文，（比如：一直写文的电脑坏了，需要换新电脑；电脑重装系统等等）这样就需要在另一台电脑上搭建环境，这样非常的麻烦，而且难免会带来一些其它依赖版本兼容问题。所以，可以采用<code>GitHub Actions</code>持续集成平台来简化发布文章的流程。</p>
<p>简化后的流程如下：</p>
<ol>
<li><p><code>hexo new &quot;title&quot;</code> (创建新文章)</p>
</li>
<li><p>编写md文档</p>
</li>
<li><p>本地仓库同步到GitHub</p>
</li>
</ol>
<ul>
<li>push到GitHub上之后，<code>GitHub Actions</code>会监听分支文件变动，触发发布流程（跟Jenkins 构建流程类似）</li>
</ul>
<p>下文整体分为两个步骤：</p>
<ol>
<li><p>借助<code>GitHub Pages</code>手动部署。</p>
</li>
<li><p>增加<code>GitHub Actions</code>配置，完成自动部署</p>
</li>
</ol>
<h1 id="2、Hexo-搭建博客"><a href="#2、Hexo-搭建博客" class="headerlink" title="2、Hexo 搭建博客"></a>2、Hexo 搭建博客</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p><a href="https://hexo.io/docs/">文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="built_in">cd</span> [workspace]</span><br><span class="line">hexo init &lt;folder:blog&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder:blog&gt;</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/5dd21663-e0b3-4304-9bb4-a65dded21137.png"></p>
<p>网站基础配置修改参考<a href="https://hexo.io/docs/configuration">这里</a></p>
<h1 id="3、GitHub-托管-Hexo-博客"><a href="#3、GitHub-托管-Hexo-博客" class="headerlink" title="3、GitHub 托管 Hexo 博客"></a>3、GitHub 托管 Hexo 博客</h1><blockquote>
<p>可以采取<code>分支管理</code>的方式，也可以新建repo，在ci配置上略有不同，这里我采用的是将<code>hexo</code>博客源码托管到<code>独立的repo上</code>，将 <code>Hexo</code> 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支</p>
</blockquote>
<ol>
<li><p>新建仓库：<code>blog</code> （名字自己起）</p>
</li>
<li><p>本地hexo仓库关联远程GitHub仓库<br>将本地仓库推送到远端</p>
</li>
<li><p>本地仓库一些必要的修改配置</p>
</li>
</ol>
<ul>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/hexojs/hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>_config.yml</code>配置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url: https://all-smile.github.io/blog</span><br><span class="line">root: /blog/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: git@github.com:all-smile/blog.git</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交到远程仓库</p>
</li>
</ul>
<ol start="3">
<li>创建 <code>gh-pages</code> 分支</li>
</ol>
<p>hexo结合GitHub创建个人网站指定的分支名，hexo 内默认设置的分支也是叫这个名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b gh-pages</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>远程仓库开启 github pages</li>
</ol>
<p>指定部署分支：gh-pages</p>
<p><img src="https://files.mdnice.com/user/34064/a973732c-bccb-4fbd-ba95-8fb1ef2945fa.png"></p>
<h1 id="4、手动部署"><a href="#4、手动部署" class="headerlink" title="4、手动部署"></a>4、手动部署</h1><p>本地项目执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>hexo模板引擎生成静态文件，并推送到<code>gh-pages</code>分支下（替换原先分支下的所有文件）</p>
<p><img src="https://files.mdnice.com/user/34064/ff1f8baa-c9cb-4570-97a5-bee921649715.png"></p>
<p>到这里就已经完成了博客的搭建</p>
<blockquote>
<p>需要注意的是：<code>hexo deploy</code> 命令并不会帮助我们同步本地的修改到远程仓库，所以当在本地写完博文之后，要做两件事：一是发布站点，二是同步远程仓库，这样做比较麻烦，下面会讲解如何配置<code>持续集成</code></p>
</blockquote>
<h2 id="4-1、查看效果"><a href="#4-1、查看效果" class="headerlink" title="4.1、查看效果"></a>4.1、查看效果</h2><p>这里我配置了自定义域名</p>
<p><img src="https://files.mdnice.com/user/34064/b9ccbe53-b080-41ba-8b10-fd9810d6b1e3.jpg"></p>
<h1 id="5、自动部署"><a href="#5、自动部署" class="headerlink" title="5、自动部署"></a>5、自动部署</h1><blockquote>
<p>就是DevOps，可以理解成 <code>GitHub</code> 通过一些<code>流水线</code>的配置（CI&#x2F;CD），然后在本地推送代码的时候触发<code>流水线</code>执行，自动部署站点。</p>
</blockquote>
<p>由于 <code>GitHub Actions</code> 也可以实现CI&#x2F;CD，<code>travis-ci</code> 的市场被挤压了，所以他们改变了运营策略，变成收费使用了！我们换用 <code>GitHub Actions</code></p>
<p><code>GitHub Actions</code> 是开源持续集成构建项目，用来持续集成托管在GitHub上的代码，使用起来也非常的简单方便。</p>
<p>使用 <code>GitHub Actions</code> 后，可以将前面部署的步骤自动化，我们只需要将本地修改的文件推送到 <code>github</code> 仓库，<code>GitHub Actions</code> 检测到 <code>master</code> 分支代码有变动，会自动执行脚本命令，将 <code>Hexo</code> 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支，very good！</p>
<h1 id="6、GitHub-Actions"><a href="#6、GitHub-Actions" class="headerlink" title="6、GitHub Actions"></a>6、GitHub Actions</h1><p><code>GitHub Actions</code>文档请点击<a href="https://docs.github.com/cn/actions">这里</a></p>
<blockquote>
<p>使用<code>Github Action</code>来部署<code>hexo</code>，这样电脑本地就不需要安装npm相关的东西了。另外利用<code>github.dev</code>也可以实现在页面上编辑了。</p>
<p>在线编辑:<br><code>Github</code>有提供一个在线编辑的页面，在Repo页面按下按键<code>.</code>就可以打开编辑页面了</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/34064/8818f33d-14ce-4d4d-ae58-079f5e90b023.png"></p>
<p>每个 <code>action</code> 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 <code>action</code>。比如，<code>actions/setup-node</code>就表示<a href="https://github.com/actions/setup-node"><code>github.com/actions/setup-node</code></a>这个仓库，它代表一个 <code>action</code>，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions"><code>github.com/actions</code></a> 里面。</p>
<h2 id="6-1、支持的令牌"><a href="#6-1、支持的令牌" class="headerlink" title="6.1、支持的令牌"></a>6.1、支持的令牌</h2><p>支持三个令牌。</p>
<table>
<thead>
<tr>
<th>令牌</th>
<th>私人仓库</th>
<th>公开仓库</th>
<th>协议</th>
<th>设置</th>
</tr>
</thead>
<tbody><tr>
<td>github_token</td>
<td>✅️</td>
<td>✅️</td>
<td>HTTPS</td>
<td>不必要</td>
</tr>
<tr>
<td>deploy_key</td>
<td>✅️</td>
<td>✅️</td>
<td>SSH</td>
<td>必要的</td>
</tr>
<tr>
<td>personal_token</td>
<td>✅️</td>
<td>✅️</td>
<td>HTTPS</td>
<td>必要的</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：<code>GITHUB_TOKEN</code>不是个人访问令牌，<code>GitHub Actions</code> 运行器会自动创建一个<code>GITHUB_TOKEN</code>密钥以在您的工作流程中进行身份验证。因此，您无需任何配置即可立即开始部署</p>
</blockquote>
<h2 id="6-2、支持的平台"><a href="#6-2、支持的平台" class="headerlink" title="6.2、支持的平台"></a>6.2、支持的平台</h2><p>所有 <code>Actions</code> 运行器：支持 Linux (Ubuntu)、macOS 和 Windows。</p>
<table>
<thead>
<tr>
<th>环境</th>
<th>github_token</th>
<th>deploy_key</th>
<th>personal_token</th>
</tr>
</thead>
<tbody><tr>
<td>ubuntu-20.04</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>ubuntu-18.04</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>macos-最新</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>windows-最新</td>
<td>✅️</td>
<td>(2)</td>
<td>✅️</td>
</tr>
</tbody></table>
<h1 id="7、为Hexo配置GitHub-Actions"><a href="#7、为Hexo配置GitHub-Actions" class="headerlink" title="7、为Hexo配置GitHub Actions"></a>7、为Hexo配置GitHub Actions</h1><p>具体步骤：</p>
<h2 id="7-1、设置-SSH-私钥-deploy-key"><a href="#7-1、设置-SSH-私钥-deploy-key" class="headerlink" title="7.1、设置 SSH 私钥 deploy_key"></a>7.1、设置 SSH 私钥 <code>deploy_key</code></h2><p>创建 SSH 部署密钥，使用以下命令生成部署密钥。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;<span class="subst">$(git config user.email)</span>&quot;</span> -f gh-pages -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>您将获得 2 个文件：</p>
<ul>
<li><p>gh-pages.pub是公钥</p>
</li>
<li><p>gh-pages是私钥</p>
</li>
</ul>
<p>接下来，转到博客源码存储库设置</p>
<ul>
<li>转到<code>Deploy Keys</code>并使用<code>Allow write access</code>添加您的公钥 <code>gh-pages.pub</code>，name写为<code>public key of ACTIONS_DEPLOY_KEY</code>，指定用途，方便后面维护</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/16070f38-5c57-482d-a1bc-5d2fa3318221.png"></p>
<ul>
<li>转到<code>Actions secrets</code>并将您的私钥 <code>gh-pages</code> 添加为 <code>ACTIONS_DEPLOY_KEY</code>（这个名称在yml文件中需要使用）</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/e2f6afbc-71e8-4fc2-bcdd-181d2dd96a6c.png"></p>
<h2 id="7-2、新建-github-x2F-workflows-x2F-pages-yml-文件"><a href="#7-2、新建-github-x2F-workflows-x2F-pages-yml-文件" class="headerlink" title="7.2、新建 .github&#x2F;workflows&#x2F;pages.yml 文件"></a>7.2、新建 .github&#x2F;workflows&#x2F;pages.yml 文件</h2><p><code>yml</code>文件通过缩进（空格，不是tab）来表示层级关系。</p>
<p><code>yaml</code>不会的，可以去看一下<a href="https://www.runoob.com/w3cnote/yaml-intro.html">这里</a>，了解一下语法即可。</p>
<p>以下文件是我个人的配置的一部分，不建议直接使用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器、分支</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span>  <span class="comment"># default branch</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 子任务</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 定运行所需要的虚拟机环境</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="comment"># with:</span></span><br><span class="line">        <span class="comment">#   submodules: true</span></span><br><span class="line">        <span class="comment">#   fetch-depth: 0</span></span><br><span class="line">      <span class="comment"># 每个name表示一个步骤:step</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16.14.1&#x27;</span> <span class="comment"># 自己正在使用的node版本即可</span></span><br><span class="line">      <span class="comment"># - run: node -v # 查看node版本号</span></span><br><span class="line">      <span class="comment"># 缓存依赖项: https://docs.github.com/cn/actions/using-workflows/caching-dependencies-to-speed-up-workflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="comment"># path: node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 查看路径 : /home/runner/work/blog/blog</span></span><br><span class="line">      <span class="comment"># - name: Look Path</span></span><br><span class="line">      <span class="comment">#   run: pwd</span></span><br><span class="line">      <span class="comment"># 查看文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Look</span> <span class="string">Dir</span> <span class="string">List</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">tree</span> <span class="string">-L</span> <span class="number">3</span> <span class="string">-a</span></span><br><span class="line">      <span class="comment"># 第一次或者依赖发生变化的时候执行 Install Dependencies，其它构建的时候不需要这一步</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Look</span> <span class="string">Dir</span> <span class="string">List</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">tree</span> <span class="string">-L</span> <span class="number">3</span> <span class="string">-a</span></span><br><span class="line">      <span class="comment"># - name: clean theme cache</span></span><br><span class="line">      <span class="comment">#   run: git rm -f --cached themes/tenacity</span></span><br><span class="line">        <span class="comment"># run: git submodule deinit themes/tenacity &amp;&amp; git rm themes/tenacity</span></span><br><span class="line">      <span class="comment"># 安装主题</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Theme</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">add</span> <span class="string">https://github.com/all-smile/tenacity.git</span> <span class="string">themes/tenacity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span>  <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">user_name:</span> <span class="string">xiao</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">allblue95@126.com</span></span><br><span class="line">          <span class="comment"># 获取提交文章源码时的commit message，作为发布gh-pages分支的信息</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">full_commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># GITHUB_TOKEN不是个人访问令牌，GitHub Actions 运行器会自动创建一个GITHUB_TOKEN密钥以在您的工作流程中进行身份验证。因此，您无需任何配置即可立即开始部​​署</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">allow_empty_commit:</span> <span class="literal">true</span> <span class="comment"># 允许空提交</span></span><br><span class="line">      <span class="comment"># Use the output from the `deploy` step(use for test action)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-3、修改-config-yml-文件中的Deploy配置"><a href="#7-3、修改-config-yml-文件中的Deploy配置" class="headerlink" title="7.3、修改 _config.yml 文件中的Deploy配置"></a>7.3、修改 <code>_config.yml</code> 文件中的<code>Deploy</code>配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:all-smile/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="comment"># 默认提交信息： Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span> <span class="comment"># 直接将提交消息传输到 GitHub Pages 存储库</span></span><br></pre></td></tr></table></figure>

<h2 id="发布效果"><a href="#发布效果" class="headerlink" title="发布效果"></a>发布效果</h2><p>本地仓库直接<code>push</code>，触发 <code>GitHub Actions</code> 自动构建发布</p>
<p><img src="https://files.mdnice.com/user/34064/3428f5ca-7730-4128-9c51-1fce5c063e99.png"></p>
<p><img src="https://files.mdnice.com/user/34064/13a98b38-a16c-4997-8a33-f825bb86fb07.png"></p>
<p><img src="https://files.mdnice.com/user/34064/9952cb44-cc50-467c-a6b4-36cab774f436.png"></p>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>请查看<a href="https://hexo.io/zh-cn/docs/themes.html">文档</a> ，自行安装配置</p>
<h1 id="8、GitHub-Actions问题解决"><a href="#8、GitHub-Actions问题解决" class="headerlink" title="8、GitHub Actions问题解决"></a>8、GitHub Actions问题解决</h1><h2 id="8-1、非法输入值"><a href="#8-1、非法输入值" class="headerlink" title="8.1、非法输入值"></a>8.1、非法输入值</h2><p>在 <code>pages.yml</code> 文件的 <code>Deploy</code> 步骤下，发布的时候需要一些参数配置，这些参数名是指定好的，不可以随便写，比如 <code>commit_msg</code>应该使用 <code>commit_message</code></p>
<p><img src="https://files.mdnice.com/user/34064/81d50c5b-188b-4925-b1f8-0da53d697b65.jpg"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Warning: Unexpected input(s) ‘commit_msg’, valid inputs are [‘deploy_key’, ‘github_token’, ‘personal_token’, ‘publish_branch’, ‘publish_dir’, ‘destination_dir’, ‘external_repository’, ‘allow_empty_commit’, ‘keep_files’, ‘force_orphan’, ‘user_name’, ‘user_email’, ‘commit_message’, ‘full_commit_message’, ‘tag_name’, ‘tag_message’, ‘enable_jekyll’, ‘disable_nojekyll’, ‘cname’, ‘exclude_assets’]</p>
</blockquote>
<h2 id="8-2、The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128"><a href="#8-2、The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128" class="headerlink" title="8.2、The process ‘&#x2F;usr&#x2F;bin&#x2F;git’ failed with exit code 128"></a>8.2、The process ‘&#x2F;usr&#x2F;bin&#x2F;git’ failed with exit code 128</h2><p>这个问题大概率是 <code>GITHUB_TOKEN</code> 造成的，参考<a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">配置文档</a></p>
<p><code>GITHUB_TOKEN</code> 是一种 <code>GitHub</code> 应用程序安装访问令牌。 可以使用安装访问令牌代表仓库中安装的 <code>GitHub</code> 应用程序进行身份验证。令牌的权限仅限于包含您的工作流程的仓库。</p>
<p><img src="https://files.mdnice.com/user/34064/909ecbe7-ad36-4d09-a511-6236bdc317c5.png"></p>
<p>解决：</p>
<ul>
<li>查看 <code>yml</code> 文件中的名字是否写错</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 仓库 <code>Settings/Actions/general</code> 下，修改 <code>GITHUB_TOKEN</code> 的权限</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/99653c2c-38e5-4a03-a190-1dad2586c372.png"></p>
<h2 id="8-3、deploy-key问题"><a href="#8-3、deploy-key问题" class="headerlink" title="8.3、deploy key问题"></a>8.3、deploy key问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: Permission to all-smile/blog.git denied to deploy key</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<ul>
<li><p>查看 <code>pages.yml</code> 中引用的变量名称是否跟 GitHub 仓库上设置的一样</p>
</li>
<li><p>公私钥是否匹配，如果不匹配，则重新生成添加即可</p>
</li>
</ul>
<p>👉👉 如果还有其它问题也可以看一下<a href="https://github.com/peaceiris/actions-gh-pages#readme">这里</a>，应该会有帮助的😊</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul>
<li><p>本地写文只需要在写完之后<code>push</code>到远程仓库即可发布</p>
</li>
<li><p>其它电脑本地使用，有git就可以了，直接拉取远程仓库源码，在本地创建文件、编辑、推送远端，即可发布</p>
</li>
<li><p>也可以用<code>github.dev</code>在线创建、编辑、发文</p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native环境配置、初始化项目、打包安装到手机，以及开发小知识</title>
    <url>/blog/posts/252268106.html</url>
    <content><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>环境：Win10 + Android</p>
<p>已经在Windows电脑上安装好 <a href="https://nodejs.org/en/">Node</a>（v14+）、Git、Yarn、<br><a href="https://www.oracle.com/java/technologies/downloads/#java11">JDK</a>(v11)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -version</span><br><span class="line">javac 11.0.15.1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">node -v</span><br><span class="line">v16.14.1</span><br></pre></td></tr></table></figure>
<p>👉 <a href="https://www.react-native.cn/docs/next/environment-setup">官方文档</a></p>
<h1 id="2、Android-Studio下载安装"><a href="#2、Android-Studio下载安装" class="headerlink" title="2、Android Studio下载安装"></a>2、Android Studio下载安装</h1><ul>
<li><a href="https://developer.android.google.cn/studio/">下载地址</a></li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14f24334e0744e9cbb662908447e5921~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h1 id="3、Android-SDK-下载安装"><a href="#3、Android-SDK-下载安装" class="headerlink" title="3、Android SDK 下载安装"></a>3、Android SDK 下载安装</h1><ul>
<li>安装 android sdk</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d9bc195ebc6458482c4574f0f740128~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba817702a1684af6a16f86fcb59f2f7d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e446d5e4bf74136af62df252fd56eea~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d8ad488eaf7457c96b14e64c1e8ac14~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e4146b0ea4d44a8932051b9dce2d7db~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="3-1、环境变量配置"><a href="#3-1、环境变量配置" class="headerlink" title="3.1、环境变量配置"></a>3.1、环境变量配置</h2><ul>
<li><p>配置系统变量<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afa360280fe1419e8e6586443eb6c345~tplv-k3u1fbpfcp-zoom-1.image"></p>
</li>
<li><p>Path 配置：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%ANDROID_SDK_ROOT%</span><br><span class="line">%ANDROID_SDK_ROOT%\platform-tools</span><br><span class="line">%ANDROID_SDK_ROOT%\emulator</span><br><span class="line">%ANDROID_SDK_ROOT%\tools</span><br><span class="line">%ANDROID_SDK_ROOT%\tools\bin</span><br></pre></td></tr></table></figure>

<h1 id="4、Scrcpy-手机模拟器下载安装使用"><a href="#4、Scrcpy-手机模拟器下载安装使用" class="headerlink" title="4、Scrcpy 手机模拟器下载安装使用"></a>4、Scrcpy 手机模拟器下载安装使用</h1><ul>
<li><a href="https://github.com/Genymobile/scrcpy">下载地址</a></li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5597618b2c424d92890e8f272395a0bd~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>下载zip文件，解压，双击运行 <code>scrcpy.exe</code> 可执行文件即可在电脑上投影手机屏幕，如下图👇</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1a38a71aa8b42c5b4b809a8dd2b21e8~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4f4f5f4725c42c480e2eed50a1199d6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<blockquote>
<p>运行可执行文件之前，使用<strong>数据线</strong>连接Android手机，进行开发者选项设置（不同的手机进入开发者模式略有差异，自行搜索，我用的是华为手机）</p>
</blockquote>
<ul>
<li>电脑端查看连接设备<br><code>adb devices</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">8TFDU18719000649        device</span><br></pre></td></tr></table></figure>
<blockquote>
<p>adb 命令，在下载 <code>scrcpy</code> 的时候已经内置了</p>
</blockquote>
<h1 id="5、安装-React-Native"><a href="#5、安装-React-Native" class="headerlink" title="5、安装 React Native"></a>5、安装 React Native</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react-native-cli -g</span><br><span class="line"></span><br><span class="line">$ react-native -v</span><br><span class="line">react-native-cli: 2.0.1</span><br><span class="line">react-native: n/a - not inside a React Native project directory</span><br></pre></td></tr></table></figure>

<h1 id="6、初始化项目"><a href="#6、初始化项目" class="headerlink" title="6、初始化项目"></a>6、初始化项目</h1><p>进入到自己的工作目录，执行下面的命令创建 react native 项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure>

<h1 id="7、运行项目安装软件到安卓机"><a href="#7、运行项目安装软件到安卓机" class="headerlink" title="7、运行项目安装软件到安卓机"></a>7、运行项目安装软件到安卓机</h1><h2 id="7-1、先用数据线连接手机和电脑，运行scrcpy-软件"><a href="#7-1、先用数据线连接手机和电脑，运行scrcpy-软件" class="headerlink" title="7.1、先用数据线连接手机和电脑，运行scrcpy 软件"></a>7.1、先用数据线连接手机和电脑，运行scrcpy 软件</h2><p>开发者选项配置修改，最终实现在电脑上可以投屏手机，并可以在电脑上操控手机</p>
<h2 id="7-2、打开-android-studio-编辑器，运行项目"><a href="#7-2、打开-android-studio-编辑器，运行项目" class="headerlink" title="7.2、打开 android studio 编辑器，运行项目"></a>7.2、打开 android studio 编辑器，运行项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run android</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">-------------------</span><br><span class="line">cd AwesomeProject</span><br><span class="line">yarn android</span><br><span class="line"># 或者</span><br><span class="line">yarn react-native run-android</span><br></pre></td></tr></table></figure>

<p>运行的时候会在手机上弹窗 “是否统一安装软件”之类的提示，点击同意即可</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b90b3f05d1f84550a4b36daf6c62d2b6~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b79e872b58ad4ab5b7901eab1f34e3d4~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="7-3、adb-reverse-命令使用"><a href="#7-3、adb-reverse-命令使用" class="headerlink" title="7.3、adb reverse  命令使用"></a>7.3、adb reverse  命令使用</h2><p><a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn">adb 文档</a></p>
<h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e692862aded418cb3f25d4b47bd63b2~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>猜测是多设备连接受影响了，可以尝试重启手机解决<br>也可以尝试如下步骤： 启停 adb 服务器</p>
<blockquote>
<p>在某些情况下，您可能需要终止 adb 服务器进程，然后重启以解决问题（例如，如果 adb 不响应命令）。</p>
<p>如需停止 adb 服务器，请使用 adb kill-server 命令。然后，您可以通过发出其他任何 adb 命令来重启服务器。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">adb reverse tcp:8081 tcp:8081</span><br></pre></td></tr></table></figure>

<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reverse tcp:8081 tcp:8081</span><br></pre></td></tr></table></figure>

<p>这条命令的意思是，Android允许我们通过ADB，把Android上的某个端口映射到电脑（adb forward），或者把电脑的某个端口映射到Android系统（adb reverse），在这里假设电脑上开启的服务，监听的端口为8081。Android手机通过USB连接电脑后，在终端直接执行<code>adb reverse tcp:8081 tcp:8081</code>，然后在手机中访问<code>127.0.0.1:8081</code>，就可以访问到电脑上启动的服务了。</p>
<p>注意：</p>
<ol>
<li>必须是在连接数据线usb的前提下才能使用该方案进行代码调试。</li>
<li>(Android 5.0 及以上)使用 adb reverse 命令，这个选项只能在 5.0 以上版本(API 21+)的安卓设备上使用。</li>
</ol>
<h1 id="8、react-native开发小知识"><a href="#8、react-native开发小知识" class="headerlink" title="8、react-native开发小知识"></a>8、react-native开发小知识</h1><h2 id="8-1、vscode-上代码飘红"><a href="#8-1、vscode-上代码飘红" class="headerlink" title="8.1、vscode 上代码飘红"></a>8.1、vscode 上代码飘红</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8fd66fbd3154e30863186824b46a2ed~tplv-k3u1fbpfcp-zoom-1.image"></p>
<ul>
<li>问题原因：</li>
</ul>
<p>VScode是默认解析ts的，但是不会默认识别 <a href="https://flow.org/en/docs/react/"><code>Flow</code></a>(<strong>静态类型检测工具</strong>)的语法，所以这种的代码会被解析成ts语法。</p>
<ul>
<li>解决方法：<br>快捷键<code>Ctrl+Shift+P</code>，输入<code>setting.json</code>，选择 首选项:打开设置(json)。</li>
</ul>
<p><code>settings.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &quot;import type&quot; 声明只能在 TypeScript 文件中使用。</span><br><span class="line">&quot;javascript.validate.enable&quot;: false,</span><br></pre></td></tr></table></figure>

<h2 id="8-2、npm-run-android-每次都需要在手机上重新安装软件包"><a href="#8-2、npm-run-android-每次都需要在手机上重新安装软件包" class="headerlink" title="8.2、npm run android 每次都需要在手机上重新安装软件包"></a>8.2、npm run android 每次都需要在手机上重新安装软件包</h2><p>开发者模式 -&gt; USB调试 -&gt; 监控ADB安装应用 -&gt; 关闭, 即可解决。</p>
<h2 id="8-3、本地开发启动多个项目"><a href="#8-3、本地开发启动多个项目" class="headerlink" title="8.3、本地开发启动多个项目"></a>8.3、本地开发启动多个项目</h2><p>默认端口号是8081，通过指定不同的端口号来启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native start --port=8082</span><br></pre></td></tr></table></figure>

<h2 id="8-4、修改软件包名称"><a href="#8-4、修改软件包名称" class="headerlink" title="8.4、修改软件包名称"></a>8.4、修改软件包名称</h2><ol>
<li>修改配置文件<br>Android<br>修改配置文件里的 <code>app_name</code> 即可，重新 <code>yarn android</code> ，发现手机上软件的名称已修改成功。</li>
</ol>
<p>文件： <code>android\app\src\main\res\values\strings.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;string name=&quot;app_name&quot;&gt;远点&lt;/string&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>react-native-rename 插件修改</li>
</ol>
<p>通过插件修改名字，必须是 使用 <code>react-native init xxx</code> 创建的项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install react-native-rename -g</span><br><span class="line">or</span><br><span class="line">yarn global add react-native-rename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目根目录执行命令</span></span><br><span class="line">npx react-native-rename &lt;newName&gt;</span><br></pre></td></tr></table></figure>

<p>修改完成。</p>
<p>本篇完！后面继续分享如何调试react native项目。</p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>✨ 欢迎大家转发、评论交流</p>
<p>🎁 蟹蟹😊</p>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统学习（运维必会）</title>
    <url>/blog/posts/1915044345.html</url>
    <content><![CDATA[<blockquote>
<p>Linux一切皆文件，最高权限的账户root。</p>
</blockquote>
<h1 id="1、开机登录"><a href="#1、开机登录" class="headerlink" title="1、开机登录"></a>1、开机登录</h1><p>开机会启动很多进程，在Windows上叫“服务”（service），在Linux上叫做“守护进程”（daemon）</p>
<p>登录方式：</p>
<ul>
<li><p>命令行登录</p>
</li>
<li><p>ssh登录</p>
</li>
<li><p>图形界面登录</p>
</li>
</ul>
<h1 id="2、关机"><a href="#2、关机" class="headerlink" title="2、关机"></a>2、关机</h1><p>不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据同步到硬盘中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync                # 将数据从内存同步到硬盘中</span><br><span class="line"></span><br><span class="line">shutdown</span><br><span class="line">shutdown -h 10      # 10分钟后关机</span><br><span class="line">shutdown -h +10     # 10分钟后关机</span><br><span class="line">shutdown -h now     # 立马关机</span><br><span class="line">shutdown -h 20:25   # 系统将在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown -r now     # 立即重启</span><br><span class="line">shutdown -r +10     # 10分钟后重启</span><br><span class="line">reboot              # 重启，相当于 shutdown -r now</span><br><span class="line">halt                # 关机，相当于 shutdown -h now</span><br></pre></td></tr></table></figure>

<h1 id="3、根目录结构"><a href="#3、根目录结构" class="headerlink" title="3、根目录结构"></a>3、根目录结构</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin        # Binary的缩写，存在最经常使用的命令</span><br><span class="line">/boot       # 存放启动Linux时要使用的一些核心文件，包括链接文件和镜像文件</span><br><span class="line">/dev        # Device的缩写，存放Linux的外部设备</span><br><span class="line">/etc        # 存放系统管理所需的配置文件和子目录</span><br><span class="line">/home       # 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录以用户的账号命名</span><br><span class="line">/lib        # 存放系统最基本的动态链接共享库，其作用类似于Windows里的DLL文件</span><br><span class="line">/lost+found # 这个目录一般是空的，当用户非正常关机时就会在这里存放一些文件</span><br><span class="line">/media      # Linux系统识别出来的设备，例如U盘，光驱，Linux把识别到的设备挂载到这个目录下</span><br><span class="line">/mnt        # 让用户临时挂载别的文件系统</span><br><span class="line">/opt        # 给主机额外安装软件所存放的目录，比如安装Oracle数据库可以放到这个目录下面</span><br><span class="line">/proc       # 虚拟目录，系统内存的映射，可以通过访问这个目录来获取系统信息</span><br><span class="line">/root       # 该目录为系统管理员，也称作超级权限的用户主目录</span><br><span class="line">/sbin       # s 就是 Super User的意思，这里存放系统管理员使用的系统管理程序</span><br><span class="line">/srv        # 存放一些服务启动之后需要提取的数据</span><br><span class="line">/sys        # Linux2.6内核一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs</span><br><span class="line">/tmp        # 存放临时文件的目录</span><br><span class="line">/usr        # 用户的很多应用程序和文件都存放在这个目录，类似于Windows下的program files</span><br><span class="line">/usr/bin    # 系统用户使用的应用程序</span><br><span class="line"></span><br><span class="line">/www        # 存放服务器网站相关的资源，环境、网站的项目-----------</span><br><span class="line">						#	LNMP: Linux、Nginx、MySQL、Php</span><br><span class="line">            # LTMP: Linux、tomcat、MySQL、Php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/aff0bdac-3d98-4b92-bb66-31b64553af07.png"></p>
<p><img src="https://gitee.com/hey-u/nav/raw/master/static/images/Golden_Leaf.jpg" alt="图片测试"></p>
<h1 id="4、文件属性"><a href="#4、文件属性" class="headerlink" title="4、文件属性"></a>4、文件属性</h1><ul>
<li><p>r：read</p>
</li>
<li><p>w： write</p>
</li>
<li><p>x ：可执行execute</p>
</li>
<li><p>-：没有权限</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>文件类型<br/>0</th>
<th>属主权限 owner<br/>1 2 3</th>
<th>属组权限 group<br/>4 5 6</th>
<th>其它用户权限 others<br/>7    8    9</th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>r     w    x</td>
<td>r     -    x</td>
<td>r     -    x</td>
</tr>
<tr>
<td>目录文件</td>
<td>读  写   执行</td>
<td>读  写  执行</td>
<td>读  写   执行</td>
</tr>
</tbody></table>
<ul>
<li><p>1、4、7：读</p>
</li>
<li><p>2、5、8：写</p>
</li>
<li><p>3、6、9：可执行</p>
</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/add9ba6d-077c-418b-8cf1-07bd8718b247.png"></p>
<h2 id="4-1、更改文件权限"><a href="#4-1、更改文件权限" class="headerlink" title="4.1、更改文件权限"></a>4.1、更改文件权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 更改9个文件属性</span><br><span class="line"></span><br><span class="line">[-rwxrwxrwx] 这九个权限属性，三个一组，</span><br><span class="line">用数字代表权限</span><br><span class="line">r: 4   w: 2   x: 1   4+2+1=7</span><br><span class="line"><span class="built_in">chmod</span> 777  可读可写可执行     <span class="built_in">chmod</span> rwxrwxrwx</span><br><span class="line"><span class="built_in">chmod</span> 666  可读可写不可执行   <span class="built_in">chmod</span> rw-rw-rw-</span><br></pre></td></tr></table></figure>

<ul>
<li>查看文件方法<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat   # 显示文件内容不够</span><br><span class="line">tac   # 倒序显示文件内容</span><br><span class="line">nl    # 显示文件内容并展示行号</span><br><span class="line">more  # 一页一页显示文件内容，(空格代表翻页，enter代表向下看一行，:f 查看当前行号)</span><br><span class="line">less  # 和more类似，向上翻页</span><br><span class="line">head  # -n参数 控制显示几行</span><br><span class="line">tail  # -n参数，倒着查看最后n行信息</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="5、硬链接、软链接"><a href="#5、硬链接、软链接" class="headerlink" title="5、硬链接、软链接"></a>5、硬链接、软链接</h1><p>软链接跟Windows上的快捷方式类似，删除源文件，快捷方式也访问不了了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">硬链接</span></span><br><span class="line">ln 01 02  # 给01文件创建一个硬链接02，01和02指向同一个文件，允许一个文件有多个路径，用户通过这种机制建立硬链接到一些重要文件上，以防误删！</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s 01 03</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/a522099f-11fd-419d-9e45-b934fca5f2fd.png"></p>
<h1 id="6、账号管理"><a href="#6、账号管理" class="headerlink" title="6、账号管理"></a>6、账号管理</h1><p>属主、属组</p>
<h2 id="6-1、添加用户"><a href="#6-1、添加用户" class="headerlink" title="6.1、添加用户"></a>6.1、添加用户</h2><p>一切皆文件，相当于在 &#x2F;etc&#x2F;passwd 文件中写入用户信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -参数 用户名</span><br><span class="line">-m 使用者主目录不存在，则自动在/home目录下创建用户名目录</span><br><span class="line"></span><br><span class="line">-G 给用户分配属组</span><br><span class="line"></span><br><span class="line">useradd -m xiaotest</span><br><span class="line"></span><br><span class="line">[root@--- home]# cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">nscd:x:28:28:NSCD Daemon:/:/sbin/nologin</span><br><span class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</span><br><span class="line">redis:x:997:995:Redis Database Server:/var/lib/redis:/sbin/nologin</span><br><span class="line">jenkins:x:996:992:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">xiao:x:1000:1000::/home/xiao:/bin/bash</span><br><span class="line">xiaotest:x:1001:1001::/home/xiaotest:/bin/bash      # /home/xiaotest 用户主目录</span><br><span class="line">[root@--- home]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-2、删除用户"><a href="#6-2、删除用户" class="headerlink" title="6.2、删除用户"></a>6.2、删除用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -r xiaotest  # 删除用户的时候 一起删除用户的目录</span><br></pre></td></tr></table></figure>

<h2 id="6-3、修改用户"><a href="#6-3、修改用户" class="headerlink" title="6.3、修改用户"></a>6.3、修改用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod</span><br><span class="line">usermod -d /home/test01 xiaotest # 更改用户xiaotest的主目录</span><br></pre></td></tr></table></figure>

<h2 id="6-4、切换用户"><a href="#6-4、切换用户" class="headerlink" title="6.4、切换用户"></a>6.4、切换用户</h2><p><code>su 用户名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@--- home]# su xiaotest   # root用户切换到xiaotest用户</span><br><span class="line">[xiaotest@--- home]$ exit      # 退出当前用户，回到root用户</span><br><span class="line">exit</span><br><span class="line">[root@--- home]#</span><br></pre></td></tr></table></figure>

<h2 id="6-5、修改阿里云服务器主机名"><a href="#6-5、修改阿里云服务器主机名" class="headerlink" title="6.5、修改阿里云服务器主机名"></a>6.5、修改阿里云服务器主机名</h2><p>随机字符串 - 自定义主机名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">hostname xiao  # 修改主机名为xiao， 重连即可生效</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启主句，主机名就会变为随机字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="6-6、密码设置"><a href="#6-6、密码设置" class="headerlink" title="6.6、密码设置"></a>6.6、密码设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root 用户配置普通用户密码</span><br><span class="line">passwd xiaotest  # 给xiaotest用户设置登录密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重建连接，使用普通用户登录即可</span></span><br></pre></td></tr></table></figure>

<h2 id="6-7、锁定解锁用户"><a href="#6-7、锁定解锁用户" class="headerlink" title="6.7、锁定解锁用户"></a>6.7、锁定解锁用户</h2><p>只有root用户才可以操作</p>
<p>使用场景: 某员工辞职，或者合伙人设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd -l xiaotest  # -l  lock 锁定用户，不能继续登录</span><br><span class="line">passwd -d xiaotest  # -d  删除密码，给用户输入空口令，没有密码也不能登录</span><br><span class="line"></span><br><span class="line">-u：解锁用户</span><br><span class="line">passwd -u xiaotest</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/61f7e942-9401-4aa7-a001-81b97b19a115.png"></p>
<h1 id="7、用户组管理"><a href="#7、用户组管理" class="headerlink" title="7、用户组管理"></a>7、用户组管理</h1><p><code>/etc/group</code> 文件</p>
<p>每个用户都有一个用户组，系统可以对一个用户组下面的所有用户进行集中管理（开发、测试、运维、root）</p>
<h2 id="7-1、创建用户组"><a href="#7-1、创建用户组" class="headerlink" title="7.1、创建用户组"></a>7.1、创建用户组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd test01</span><br><span class="line"></span><br><span class="line">[root@xiao ~]# cat /etc/group</span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mem:x:8:</span><br><span class="line">kmem:x:9:</span><br><span class="line">wheel:x:10:</span><br><span class="line">cdrom:x:11:</span><br><span class="line">mail:x:12:postfix</span><br><span class="line">man:x:15:</span><br><span class="line">dialout:x:18:</span><br><span class="line">floppy:x:19:</span><br><span class="line">games:x:20:</span><br><span class="line">tape:x:33:</span><br><span class="line">video:x:39:</span><br><span class="line">ftp:x:50:</span><br><span class="line">lock:x:54:</span><br><span class="line">audio:x:63:</span><br><span class="line">nobody:x:99:</span><br><span class="line">users:x:100:</span><br><span class="line">utmp:x:22:</span><br><span class="line">utempter:x:35:</span><br><span class="line">input:x:999:</span><br><span class="line">systemd-journal:x:190:</span><br><span class="line">systemd-network:x:192:</span><br><span class="line">dbus:x:81:</span><br><span class="line">polkitd:x:998:</span><br><span class="line">ssh_keys:x:997:</span><br><span class="line">sshd:x:74:</span><br><span class="line">postdrop:x:90:</span><br><span class="line">postfix:x:89:</span><br><span class="line">chrony:x:996:</span><br><span class="line">ntp:x:38:</span><br><span class="line">tcpdump:x:72:</span><br><span class="line">nscd:x:28:</span><br><span class="line">mysql:x:27:</span><br><span class="line">redis:x:995:</span><br><span class="line">cgred:x:994:</span><br><span class="line">docker:x:993:</span><br><span class="line">jenkins:x:992:</span><br><span class="line">tss:x:59:</span><br><span class="line">xiao:x:1000:</span><br><span class="line">xiaotest:x:1001:</span><br><span class="line">allblue:x:1002:</span><br><span class="line">test01:x:1003:</span><br><span class="line">test02:x:520:      # 通过使用 -g 参数制定id</span><br><span class="line">dev:x:1003:dev01   # dev组 该组下有dev01用户 新建用户是通过-G参数指定</span><br><span class="line">dev01:x:1004:</span><br><span class="line">[root@xiao ~]#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过使用 -g 参数指定id</span><br><span class="line">groupadd -g 520 test02</span><br></pre></td></tr></table></figure>

<h2 id="7-2、删除用户组"><a href="#7-2、删除用户组" class="headerlink" title="7.2、删除用户组"></a>7.2、删除用户组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel test01</span><br></pre></td></tr></table></figure>

<h2 id="7-3、修改用户组"><a href="#7-3、修改用户组" class="headerlink" title="7.3、修改用户组"></a>7.3、修改用户组</h2><p>修改权限信息和名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-g 修改id</span><br><span class="line">-n 修改名字</span><br><span class="line">groupmod -g 123 test01</span><br><span class="line">groupmod -n newtest01 test01</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-4、切换用户组"><a href="#7-4、切换用户组" class="headerlink" title="7.4、切换用户组"></a>7.4、切换用户组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录当前用户 xiaotest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">newgrp root</span></span><br></pre></td></tr></table></figure>

<h2 id="7-5、用户密码"><a href="#7-5、用户密码" class="headerlink" title="7.5、用户密码"></a>7.5、用户密码</h2><p><code>/etc/shadow</code>文件下</p>
<p>密码已经加密</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">allblue:$6$hSPupMOZ$WMbjL2pn8bhSkiD7NicH6sDAJYfEKnU3ofylMuOrSMuqqt/i/wirkCwbinA0VjhXBTExmSSPdFb6LPpLRN3hS.:18917:0:99999:7:::</span><br></pre></td></tr></table></figure>

<h1 id="8、磁盘管理"><a href="#8、磁盘管理" class="headerlink" title="8、磁盘管理"></a>8、磁盘管理</h1><p><code>du - disk usage</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df  查看系统整体磁盘的使用量</span><br><span class="line">df -h 以兆(m)为单位显示</span><br><span class="line"></span><br><span class="line">du  查看当前磁盘的空间使用量</span><br><span class="line">du -a # 查看全部文件，包括隐藏文件和子文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看根目录下每个目录多占用的容量</span></span><br><span class="line">du -sm /*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">寻找当前目录，哪个文件夹占用空间最大</span></span><br><span class="line">du -h --max-depth=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/ceab08f4-9ec2-4cf8-b3c7-55f8b8e59491.png"></p>
<p><img src="https://files.mdnice.com/user/34064/38149daa-3e4b-460d-b8df-75b08375bd23.png"></p>
<h2 id="8-1、释放空间"><a href="#8-1、释放空间" class="headerlink" title="8.1、释放空间"></a>8.1、释放空间</h2><p>使用 <code>du -h --max-depth=1</code>  命令查找大文件</p>
<h3 id="x2F-var-x2F-log-x2F-journal-x2F-垃圾日志清理"><a href="#x2F-var-x2F-log-x2F-journal-x2F-垃圾日志清理" class="headerlink" title="&#x2F;var&#x2F;log&#x2F;journal&#x2F; 垃圾日志清理"></a><strong>&#x2F;var&#x2F;log&#x2F;journal&#x2F; 垃圾日志清理</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 只保留近一周的日志</span><br><span class="line">journalctl <span class="literal">--vacuum-time</span>=<span class="number">1</span>w</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 只保留<span class="number">500</span>MB的日志</span><br><span class="line">journalctl <span class="literal">--vacuum-size</span>=<span class="number">500</span>M</span><br></pre></td></tr></table></figure>

<h1 id="9、进程管理"><a href="#9、进程管理" class="headerlink" title="9、进程管理"></a>9、进程管理</h1><ol>
<li><p>Linux中每一个程序都有一个自己的进程，每一个进程都有一个id</p>
</li>
<li><p>每一个进程都会有一个父进程</p>
</li>
<li><p>进程有两种存在方式：前台、后台</p>
</li>
<li><p>一般服务都是后台运行的，程序都是是前台运行的</p>
</li>
</ol>
<h2 id="9-1、ps-aux"><a href="#9-1、ps-aux" class="headerlink" title="9.1、ps -aux"></a>9.1、ps -aux</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps   # 查看当前系统中正在执行的各种进程的信息</span><br><span class="line"></span><br><span class="line">-a # 显示当前终端运行的所有进程信息</span><br><span class="line">-u # 以用户的信息显示进程</span><br><span class="line">-x # 显示后台运行进程的参数 启动进程时所携带的参数</span><br><span class="line"></span><br><span class="line">| # 管道符</span><br><span class="line">A | B  # A、B命令，A命令的结果作为输出传递给B命令</span><br><span class="line">grep # 查看文件中复合条件的字符串</span><br><span class="line"></span><br><span class="line">ps -aux|grep nginx   # 查看nginx的进程信息</span><br><span class="line">[root@xiao composetest]# ps -aux|grep nginx</span><br><span class="line">root     15986  0.0  0.0 112712   960 pts/0    S+   19:29   0:00 grep --color=auto nginx</span><br><span class="line">root     19664  0.0  0.0  45940  1168 ?        Ss   Oct06   0:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">nobody   19668  0.0  0.1  46928  3248 ?        S    Oct06   1:52 nginx: worker process</span><br><span class="line">[root@xiao composetest]#</span><br><span class="line"></span><br><span class="line">ps -aux|grep mongo   # 查看mongo的进程信息</span><br><span class="line">root     16035  0.0  0.0 112712   956 pts/0    S+   19:29   0:00 grep --color=auto mongo</span><br><span class="line">root     19440  0.4  5.3 1635344 101348 ?      SLl  Sep04 308:50 mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>UID    &#x2F;&#x2F;用户ID、但输出的是用户名</p>
</li>
<li><p>PID    &#x2F;&#x2F;进程的ID</p>
</li>
<li><p>PPID    &#x2F;&#x2F;父进程ID</p>
</li>
<li><p>C      &#x2F;&#x2F;进程占用CPU的百分比</p>
</li>
<li><p>STIME  &#x2F;&#x2F;进程启动到现在的时间</p>
</li>
<li><p>TTY    &#x2F;&#x2F;该进程在那个终端上运行，若与终端无关，则显示? 若为pts&#x2F;0等，则表示由网络连接主机进程。</p>
</li>
<li><p>CMD    &#x2F;&#x2F;命令的名称和参数</p>
</li>
</ul>
<h2 id="9-2、ps-ef-可以查看到父进程的信息"><a href="#9-2、ps-ef-可以查看到父进程的信息" class="headerlink" title="9.2、ps -ef 可以查看到父进程的信息"></a>9.2、ps -ef 可以查看到父进程的信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure>

<h2 id="9-3、进程树（目录树）"><a href="#9-3、进程树（目录树）" class="headerlink" title="9.3、进程树（目录树）"></a>9.3、进程树（目录树）</h2><p>看父进程可以通过目录树来查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pstree</span><br><span class="line">-p # 显示父id (PPID)</span><br><span class="line">-u # 显示用户组</span><br><span class="line"></span><br><span class="line">pstree -pu</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/34064/915527df-3b7d-45df-95ab-440ed0444969.png"></p>
<h2 id="9-4、top命令"><a href="#9-4、top命令" class="headerlink" title="9.4、top命令"></a>9.4、top命令</h2><p><img src="https://files.mdnice.com/user/34064/b211a66e-8f66-47f7-9281-1bc7f6356a79.png"></p>
<h2 id="9-5、结束进程"><a href="#9-5、结束进程" class="headerlink" title="9.5、结束进程"></a>9.5、结束进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill pid # 终止进程</span><br><span class="line">kill -9 pid # 强制终止进程</span><br></pre></td></tr></table></figure>

<h2 id="9-6、nohup-后台运行进程"><a href="#9-6、nohup-后台运行进程" class="headerlink" title="9.6、nohup 后台运行进程"></a>9.6、nohup 后台运行进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar jenkins.war &amp;</span><br></pre></td></tr></table></figure>

<h1 id="10、环境安装"><a href="#10、环境安装" class="headerlink" title="10、环境安装"></a>10、环境安装</h1><p>三种方式：</p>
<ul>
<li><p>rpm</p>
</li>
<li><p>解压缩</p>
</li>
<li><p>yum在线安装</p>
</li>
</ul>
<h1 id="11、防火墙"><a href="#11、防火墙" class="headerlink" title="11、防火墙"></a>11、防火墙</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld 查看firewalld状态</span><br><span class="line">systemctl</span><br><span class="line">firewall-cmd</span><br><span class="line">firewall-cmd --list-all</span><br><span class="line">firewall-cmd --add-port=8080/tcp --premanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>👉 阿里云服务器配置安全组</p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>V8中的快慢数组（附源码分析、图文更易理解😃）</title>
    <url>/blog/posts/1787681656.html</url>
    <content><![CDATA[<blockquote>
<p>接上一篇 <a href="https://juejin.cn/post/7125763016582234142">V8 中的快慢属性</a>，本篇分析V8 中的快慢数组，了解数组全填充还是带孔、快慢数组、快慢转化、动态扩缩容等等。其实很多语言底层都采用类似的处理方式，比如：Golang中切片的append操作就涉及扩容处理。</p>
</blockquote>
<p>🎁 D8调试工具使用请来<a href="https://juejin.cn/post/7126505899337711647">这里</a></p>
<h1 id="1、全填充-or-带孔"><a href="#1、全填充-or-带孔" class="headerlink" title="1、全填充 or 带孔"></a>1、全填充 or 带孔</h1><p>通过一个小李子，看一下什么是全填充数组(<code>Paked-Array</code>)，什么是带孔数组(<code>Holey-Array</code>)</p>
<p>前面还写了<strong>稀疏数组</strong>，稀疏数组更加具有业务应用性，清洗的是无意义的数据，可以对比带孔数组来分析一下，有兴趣请看👉 <a href="https://juejin.cn/post/7124557913921847327">稀疏数组——实现五子棋存盘和续上盘功能</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// undefined</span></span><br><span class="line">o.<span class="property">__proto__</span> = &#123; <span class="number">1</span>: <span class="string">&#x27;B&#x27;</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">0</span>])          <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// &#x27;B&#x27;   但如何确定要访问原型链？？🤔</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">2</span>])          <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">3</span>])          <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>如果一个数组中所有位置均有值，我们称之为<code>全填充</code>（<strong>Packed</strong>）数组；</p>
<p>若某些位置在初始化时未定义（如 <code>const arr = [1, , 3]</code> 中的 arr[1]），或定义后被删除（delete，如上述例子），称之为<code>带孔</code>（<strong>Holey</strong>）数组。</p>
<p>该例子在 V8 的访问可以通过下图解释：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/819317cc4d4142bea00e155929af1fae~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>一开始数组 o 是 packed 的，所以访问 o[1] 时可以直接获取值，而不需要访问原型。</p>
<p>而行 4：<code>delete o[1]</code> 为数组引入了一个孔洞（<code>the_hole</code>），用于标记不存在的属性，同时又行 6 为 o 定义了原型上的 1 属性，当再次获取 o[1] 时会<strong>穿孔</strong>进而继续往原型链上查询。原型链上的查询是昂贵的，<em>可以根据是否有 the_hole 来降低这部分查询开销</em>。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cd8c5fcb1764d669c875a742877de72~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h1 id="2、快慢数组"><a href="#2、快慢数组" class="headerlink" title="2、快慢数组"></a>2、快慢数组</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr[<span class="number">1999</span>] = <span class="number">1999</span></span><br><span class="line"><span class="comment">// arr 会如何存储？</span></span><br></pre></td></tr></table></figure>

<p>这个例子中，在行 1 声明完毕后 arr 是一个全填充的数组，但在行 2 马上又定义索引 1999 处值为 1999，此时如果为 arr 创建一个长度为 2000 的完整数组来存储这样的稀疏数据将会非常占用内存，为了应对这种情况，V8 会将数组降级为<code>慢数组</code>，创建一个字典来存储<code>「键、值、描述符」</code>（<strong>key、value、descriptor</strong>） 三元组。这就是 <code>Object.defineProperty(object, key, descriptor)</code> API 同样会做的事情。</p>
<blockquote>
<ol>
<li><p>鉴于我们没有办法在 JavaScript 的 API 层面让 V8 找到 HiddenClass 并存储对应的 descriptor 信息，所以当使用 <code>Object.defineProperty</code> 自定义 key、value、descriptor 时，V8 都会使用慢属性，对应到数组中就是慢数组。</p>
</li>
<li><p><code>Object.defineProperty</code> 是 Vue 2 的核心 API，当对象或数组很庞大时，不可避免地导致访问速度下降，这是底层原理决定的。</p>
</li>
</ol>
</blockquote>
<p>那究竟什么是快数组和慢数组呢？我们看下V8底层对于数组的定义：👉 <a href="https://source.chromium.org/chromium/chromium/src/+/master:v8/src/objects/js-array.h">源代码：v8&#x2F;src&#x2F;objects&#x2F;js-array.h</a></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62c161602f244b0b516b57a50e65b88~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ul>
<li><p>快模式：数组实现的是 V8 里一个叫 <code>FixedArray</code> 的类，它在内存中是<strong>连续的空间</strong>，直接通过索引读写值，非常快。如果有 push 或 pop 操作，它会动态地扩容或收缩。</p>
</li>
<li><p>慢模式：如前文所介绍，V8 创建了一个字典（<code>HashTable</code>）来记录映射关系，其中索引的整数值即是字典的键。</p>
</li>
</ul>
<h2 id="为什么数组也是对象类型的？"><a href="#为什么数组也是对象类型的？" class="headerlink" title="为什么数组也是对象类型的？"></a>为什么数组也是对象类型的？</h2><p>在 V8 源码中清晰地表明，JSArray 继承自 JSObject，即数组是一个特殊的对象，而 JS 中所有非原始类型都是对象的实例，所以 JS 中数组可以存储多种类型的值。</p>
<p>数组内部也是用key-value的存储形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540021a06a2e43379f6141d37d450b75~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="2-1、快数组何时转换为慢数组"><a href="#2-1、快数组何时转换为慢数组" class="headerlink" title="2.1、快数组何时转换为慢数组"></a>2.1、快数组何时转换为慢数组</h2><h3 id="1-、看一下源码先👇"><a href="#1-、看一下源码先👇" class="headerlink" title="(1)、看一下源码先👇"></a>(1)、看一下源码先👇</h3><ol>
<li><p>path:v8&#x2F;src&#x2F;objects&#x2F;js-objects-inl.h</p>
<p> 快慢模式转化： <code>ShouldConvertToSlowElements</code></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// path:v8/src/objects/js-objects-inl.h</span><br><span class="line"></span><br><span class="line">// If the fast-case backing storage takes up much more memory than a dictionary</span><br><span class="line">// backing storage would, the object should have slow elements.</span><br><span class="line">// static</span><br><span class="line">static inline bool ShouldConvertToSlowElements(uint32_t used_elements,</span><br><span class="line">                                               uint32_t new_capacity) &#123;</span><br><span class="line">  uint32_t size_threshold = NumberDictionary::kPreferFastElementsSizeFactor *</span><br><span class="line">                            NumberDictionary::ComputeCapacity(used_elements) *</span><br><span class="line">                            NumberDictionary::kEntrySize;</span><br><span class="line">  return size_threshold &lt;= new_capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline bool ShouldConvertToSlowElements(JSObject object,</span><br><span class="line">                                               uint32_t capacity,</span><br><span class="line">                                               uint32_t index,</span><br><span class="line">                                               uint32_t* new_capacity) &#123;</span><br><span class="line">  STATIC_ASSERT(JSObject::kMaxUncheckedOldFastElementsLength &lt;=</span><br><span class="line">                JSObject::kMaxUncheckedFastElementsLength);</span><br><span class="line">  if (index &lt; capacity) &#123;</span><br><span class="line">    *new_capacity = capacity;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if (index - capacity &gt;= JSObject::kMaxGap) return true;</span><br><span class="line">  *new_capacity = JSObject::NewElementsCapacity(index + 1);</span><br><span class="line">  DCHECK_LT(index, *new_capacity);</span><br><span class="line">  if (*new_capacity &lt;= JSObject::kMaxUncheckedOldFastElementsLength ||</span><br><span class="line">      (*new_capacity &lt;= JSObject::kMaxUncheckedFastElementsLength &amp;&amp;</span><br><span class="line">       ObjectInYoungGeneration(object))) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return ShouldConvertToSlowElements(object.GetFastElementsUsage(),</span><br><span class="line">                                     *new_capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-、分析"><a href="#2-、分析" class="headerlink" title="(2)、分析"></a>(2)、分析</h3><ul>
<li><p>如果快数组扩容后的容量是原来的 <strong>3 倍以上</strong>，意味着它比 <code>HashTable</code> 形式存储占用更大的内存，快数组会转换为慢数组</p>
</li>
<li><p>如果快数组新增的索引与原来最大索引的差值大于 1024，快数组会被转换会慢数组</p>
</li>
</ul>
<p>所以，前面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1999</span>] = <span class="number">1999</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br></pre></td></tr></table></figure>

<p><code>1999 - 2 &gt; 1024</code>，arr 从快数组转换为哈希形式存储的慢数组。</p>
<p>下面看一下详细运行信息👇</p>
<ul>
<li>修改arr之前:</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bae16e0c9bcb4866a16f15ad5b71f53f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ul>
<li>修改arr之后：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05f44d5f19f840c4a7aa25eba2aef089~tplv-k3u1fbpfcp-watermark.image" alt="9c1a1af43947b4da39b9c554d56c312.png"></li>
</ul>
<h2 id="2-2、慢数组何时转换为快数组"><a href="#2-2、慢数组何时转换为快数组" class="headerlink" title="2.2、慢数组何时转换为快数组"></a>2.2、慢数组何时转换为快数组</h2><h3 id="1-、看一下源码先👇-1"><a href="#1-、看一下源码先👇-1" class="headerlink" title="(1)、看一下源码先👇"></a>(1)、看一下源码先👇</h3><ol>
<li>path:v8&#x2F;src&#x2F;objects&#x2F;js-objects.cc</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// path:v8/src/objects/js-objects.cc</span><br><span class="line"></span><br><span class="line">// line:4932</span><br><span class="line">static bool ShouldConvertToFastElements(JSObject object,</span><br><span class="line">                                        NumberDictionary dictionary,</span><br><span class="line">                                        uint32_t index,</span><br><span class="line">                                        uint32_t* new_capacity) &#123;</span><br><span class="line">  // If properties with non-standard attributes or accessors were added, we</span><br><span class="line">  // cannot go back to fast elements.</span><br><span class="line">  if (dictionary.requires_slow_elements()) return false;</span><br><span class="line"></span><br><span class="line">  // Adding a property with this index will require slow elements.</span><br><span class="line">  if (index &gt;= static_cast&lt;uint32_t&gt;(Smi::kMaxValue)) return false;</span><br><span class="line"></span><br><span class="line">  if (object.IsJSArray()) &#123;</span><br><span class="line">    Object length = JSArray::cast(object).length();</span><br><span class="line">    if (!length.IsSmi()) return false;</span><br><span class="line">    *new_capacity = static_cast&lt;uint32_t&gt;(Smi::ToInt(length));</span><br><span class="line">  &#125; else if (object.IsJSArgumentsObject()) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    *new_capacity = dictionary.max_number_key() + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  *new_capacity = std::max(index + 1, *new_capacity);</span><br><span class="line"></span><br><span class="line">  uint32_t dictionary_size = static_cast&lt;uint32_t&gt;(dictionary.Capacity()) *</span><br><span class="line">                             NumberDictionary::kEntrySize;</span><br><span class="line"></span><br><span class="line">  // 看这里👇， 当慢数组转换成快数组能节省 不少于 50% 的空间时，才会将其转换</span><br><span class="line">  // Turn fast if the dictionary only saves 50% space.</span><br><span class="line">  return 2 * dictionary_size &gt;= *new_capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-、分析-1"><a href="#2-、分析-1" class="headerlink" title="(2)、分析"></a>(2)、分析</h3><p>元素能存放在快数组中并且长度不在smi之间（64位-2^31到2^32-1），并且当前慢数组空间相比快数组节省值小于等于50%，则转变成为快数组。</p>
<h2 id="快慢转换总结"><a href="#快慢转换总结" class="headerlink" title="快慢转换总结"></a>快慢转换总结</h2><ul>
<li><p>快数组就是以空间换时间的方式，申请了大块连续内存，提高了执行效率。</p>
</li>
<li><p>慢数组以时间换空间，不必申请连续的空间，节省了内存，但需要付出效率变差的代价。</p>
</li>
</ul>
<h1 id="3、动态扩容与收缩"><a href="#3、动态扩容与收缩" class="headerlink" title="3、动态扩容与收缩"></a>3、动态扩容与收缩</h1><h2 id="3-1、扩容"><a href="#3-1、扩容" class="headerlink" title="3.1、扩容"></a>3.1、扩容</h2><p>看下源码👇</p>
<ol>
<li><p>path:v8&#x2F;src&#x2F;objects&#x2F;js-array.h</p>
<p> 空数组预分配的大小: 4</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// path:v8/src/objects/js-array.h</span><br><span class="line"></span><br><span class="line">// Dispatched behavior.</span><br><span class="line">DECL_PRINTER(JSArray)</span><br><span class="line">DECL_VERIFIER(JSArray)</span><br><span class="line"></span><br><span class="line">// Number of element slots to pre-allocate for an empty array.</span><br><span class="line">// 空数组预分配的大小为4</span><br><span class="line">static const int kPreallocatedArrayElements = 4;</span><br><span class="line"></span><br><span class="line">static const int kLengthDescriptorIndex = 0;</span><br></pre></td></tr></table></figure>

<p>上面代码表明，当声明一个空数组时，已预分配好 4 个字节的存储空间。</p>
<p>所以 [] 与 [1, 2, 3, 4] 占用一样多的内存。 前面说过，JSArray 继承自 JSObject，我们可以在 js-objects.h 中找到如下代码：</p>
<ol start="2">
<li><p>path:v8&#x2F;src&#x2F;objects&#x2F;js-objects.h</p>
<p> 扩容公式</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// path:v8/src/objects/js-objects.h</span><br><span class="line"></span><br><span class="line">// line:551👇</span><br><span class="line">static const uint32_t kMinAddedElementsCapacity = 16;</span><br><span class="line"></span><br><span class="line">// Computes the new capacity when expanding the elements of a JSObject.</span><br><span class="line">static uint32_t NewElementsCapacity(uint32_t old_capacity) &#123;</span><br><span class="line">  // (old_capacity + 50%) + kMinAddedElementsCapacity</span><br><span class="line">  // 扩容公式:原有内存容量（1.5倍）+ 16</span><br><span class="line">  return old_capacity + (old_capacity &gt;&gt; 1) + kMinAddedElementsCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是对 JSObject elements 扩容和对 JSArray 扩容的通用方法。扩容后容量的计算逻辑是：<strong>在原占用空间 old_capacity 的基础上增加一半（old_capacity &gt;&gt; 1 右移 1 位表示除 2，再相加得原空间 1.5 倍），再加上 16</strong>。</p>
<p><strong>举例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>arr.push 之前：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/469c1808dc7f4a288a507e3d77c0e20e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
</li>
<li><p>arr.push 后：</p>
</li>
</ul>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d059832a1fd5480da0b6e62b224ef908~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><strong>具体分析如下：</strong><br>👇</p>
<ol>
<li><p>向数组 [1, 2, 3, 4] push 5 时，首先判断到当前容量已满，需要计算新容量。</p>
</li>
<li><p>old_capacity &#x3D; 4，new_capacity &#x3D; 4 + 4 &gt;&gt; 1 + 16 &#x3D; 22，得出 [1, 2, 3, 4, 5] 的容量为 22 个字节，</p>
</li>
<li><p>V8 向操作系统申请一块连续大小为 22 字节的内存空间，随后将老数据一一 copy，再新将新增元素写入。</p>
</li>
</ol>
<h2 id="3-2-缩容"><a href="#3-2-缩容" class="headerlink" title="3.2 缩容"></a>3.2 缩容</h2><p>紧接着，我们在 <code>src/objects/elements.cc</code> 中找到 <code>SetLengthImpl</code> 方法中的如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// path:src/objects/elements.cc</span><br><span class="line"></span><br><span class="line">// line:750</span><br><span class="line">if (2 * length + JSObject::kMinAddedElementsCapacity &lt;= capacity) &#123;</span><br><span class="line">  // If more than half the elements won&#x27;t be used, trim the array.</span><br><span class="line">  // Do not trim from short arrays to prevent frequent trimming on</span><br><span class="line">  // repeated pop operations.</span><br><span class="line">  // Leave some space to allow for subsequent push operations.</span><br><span class="line">  int elements_to_trim = length + 1 == old_length</span><br><span class="line">                             ? (capacity - length) / 2</span><br><span class="line">                             : capacity - length;</span><br><span class="line">  isolate-&gt;heap()-&gt;RightTrimFixedArray(*backing_store, elements_to_trim);</span><br><span class="line">  // Fill the non-trimmed elements with holes.</span><br><span class="line">  BackingStore::cast(*backing_store)</span><br><span class="line">      .FillWithHoles(length,</span><br><span class="line">                     std::min(old_length, capacity - elements_to_trim));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // Otherwise, fill the unused tail with holes.</span><br><span class="line">  BackingStore::cast(*backing_store).FillWithHoles(length, old_length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当数组元素减少（如 pop）后，如果数组容量大于等于 length 的 2 倍，则进行容量调整，使用 <code>RightTrimFixedArray</code> 函数，计算出需要释放的空间大小，做好标记，等待 GC 回收；如果数组容量小于 length 的 2 倍，则用 holes 对象填充。</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li><p>数组元素少的时候是线性结构存储（FixedArray）的，内存地址连续，查找速度快，可以动态扩缩容；</p>
</li>
<li><p>数组元素多的时候转化为慢数组，通过创建了一个字典来记录映射关系，内存不连续，通过大名鼎鼎的Object.defineProperty(object, key, descriptor)创建</p>
</li>
</ol>
<p>js的数组看似不同，其实只是V8 在底层实现上做了一层封装，使用两种数据结构实现数组，并且通过时间和空间2个纬度的取舍，优化了数组的性能。</p>
<p><a href="https://z3rog.tech/blog/2020/fast-properties.html">参考学习博客</a></p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得<strong>点赞关注收藏</strong>哟，回看不迷路 😉</p>
<p>✨ 欢迎大家转发、评论交流</p>
<p>🎁 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Web和App的一点点思考</title>
    <url>/blog/posts/4136692609.html</url>
    <content><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>朋友在微信上分享给我一个“PDD”砍一刀的链接，让我帮忙砍一刀助力，我点开链接之后，让我去下载App，然后去应用商店下载一个App，注册登录完成之后，回到微信里面点击链接，就会唤醒App，接着就是在App里面一顿操作，还不能退出到首页，我呆了😮</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>从我的角度看，有两个点不是很明白：</p>
<ol>
<li>不可以在浏览器里面以Web的方式直接打开助力吗，显然是可以的，事实是非得让下载App才可以</li>
<li>助力的流程怎么回事，为什么不可以退出这个流程呢，一直在里面来回转啊转啊，清除后台运行程序才可以退出？还是我没有发现别的退出路径呢？</li>
</ol>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li><p>Web发展方向，在进入移动互联网时代后，国内外出现了不同的发展路线：国外依然致力于精致Web的研发，国内则是随着微信小程序的推出，让一个App里面可以运行其它的“App”，出现了几大平台自研小程序的现象，而且不同的小程序之间还设有壁垒，不通用，接着又出现了一些搞兼容多方小程序的技术，其实就是做了一些“框架”级别的适配器，封装向下转型、向上转型。</p>
</li>
<li><p>那到底有没有一种技术可以让很多不用的程序都在上面跑呢，答案是确定的，不但有，而且已经发展了很多年了，那就是Web，让所有的应用程序都运行在浏览器里面。</p>
</li>
</ul>
<p>这些家伙们在做什么？自己给自己出题玩？到底有没有推动技术的发展，“我不考虑这个，我要赚钱！”</p>
<blockquote>
<p>类小程序技术也不是微信的第一个尝试的，还有几大手机厂商的“快应用”等。<br>从中你会发现小公司只要有创新，没有展露头角发展不下去是死路一条，展露头角被大公司抄袭又是一死，<strong>这就是申请软件著作权，申请专利的重要性。</strong></p>
</blockquote>
<h2 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h2><p>前端的细分领域真的是太多太多了，期待Web技术会有更好的发展，不要往那些不能长久的、可持续发展的事物上投入太多精力，让那些细枝末节快点走进历史吧。</p>
<hr>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>博客园美化</title>
    <url>/blog/posts/2159164587.html</url>
    <content><![CDATA[<blockquote>
<p>博客园允许用户设置多样化的主题。通过选择皮肤，然后开启JS脚本权限，在设置里面植入跟皮肤配套的<code>CSS</code>、<code>JS</code>，并且禁用默认的<code>CSS</code>，即可实现个性化的界面风格和交互行为。</p>
</blockquote>
<h2 id="SimpleMemory-皮肤"><a href="#SimpleMemory-皮肤" class="headerlink" title="SimpleMemory 皮肤"></a>SimpleMemory 皮肤</h2><p>文档参考<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v2/#/">这里</a>，非常详细🌹</p>
<ul>
<li>效果预览：</li>
</ul>
<p><img src="https://files.mdnice.com/user/34064/db0e1b60-9601-4013-83e4-1c8d76d21afe.png"></p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="1-选项"><a href="#1-选项" class="headerlink" title="1. 选项"></a>1. 选项</h3><p>勾选 “公告”</p>
<p><img src="https://files.mdnice.com/user/34064/b2253cad-548a-4813-bfe1-2a9b7a71cd21.jpg"></p>
<h3 id="2-基本设置、代码高亮、开通JS权限"><a href="#2-基本设置、代码高亮、开通JS权限" class="headerlink" title="2. 基本设置、代码高亮、开通JS权限"></a>2. 基本设置、代码高亮、开通JS权限</h3><p>皮肤选择 <code>SimpleMemory</code></p>
<p><img src="https://files.mdnice.com/user/34064/7cdee491-6774-47fb-aa74-f2e023266c9e.jpg"></p>
<h3 id="3-页面定制CSS代码"><a href="#3-页面定制CSS代码" class="headerlink" title="3. 页面定制CSS代码"></a>3. 页面定制CSS代码</h3><p>这里我选择的是 Cnblogs-Theme-SimpleMemory <code>V2.1.0</code> 版本</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@<span class="number">2.1</span>.<span class="number">0</span>/dist/simpleMemory.css);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><p>页面定制CSS代码我使用的是外链导入形式（免费jsdelivr cdn加速，也可以自行选择其它方式托管）。</p>
</li>
<li><p>勾选“禁用模板默认CSS”。（使得外链css生效）</p>
</li>
</ol>
</blockquote>
<h3 id="4-博客侧边栏公告设置"><a href="#4-博客侧边栏公告设置" class="headerlink" title="4. 博客侧边栏公告设置"></a>4. 博客侧边栏公告设置</h3><p><img src="https://files.mdnice.com/user/34064/594cbc1a-ee2f-4c76-b340-d9e52a26a737.png"></p>
<p>下面是我的配置（仅供参考）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">cnblogsConfig</span> = &#123;</span><br><span class="line">      <span class="comment">// iconfont（我个人的，可以自己建一个iconfont项目维护使用）</span></span><br><span class="line">      <span class="attr">fontIconExtend</span>: <span class="string">&quot;//at.alicdn.com/t/c/font_3603036_keyavmcqbhn.css&quot;</span>,</span><br><span class="line">      <span class="attr">info</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;甜点cc&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">        <span class="attr">startDate</span>: <span class="string">&#x27;2016-10-08&#x27;</span>, <span class="comment">// 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间</span></span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">&#x27;https://pic.cnblogs.com/avatar/1037867/20220801164532.png&#x27;</span>, <span class="comment">// 用户头像</span></span><br><span class="line">        <span class="attr">blogIcon</span>: <span class="string">&#x27;https://pic.cnblogs.com/avatar/1037867/20220801164532.png&#x27;</span>, <span class="comment">// 网站图标 favicon.ico</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">sidebar</span>: &#123;</span><br><span class="line">        <span class="attr">infoBackground</span>: <span class="string">&#x27;https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/Machine_tool.jpg&#x27;</span>, <span class="comment">// 个人信息背景</span></span><br><span class="line">        <span class="attr">titleMsg</span>: <span class="string">&#x27;宝宝等你很久啦~🌹🌹&#x27;</span>, <span class="comment">// 侧边栏title信息</span></span><br><span class="line">        <span class="attr">navList</span>: [</span><br><span class="line">            [<span class="string">&#x27;友链&#x27;</span>, <span class="string">&#x27;https://www.cnblogs.com/all-smile/p/16612170.html&#x27;</span>, <span class="string">&#x27;icon-pengyoufill&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;个人主页&#x27;</span>, <span class="string">&#x27;https://home.i-xiao.space/&#x27;</span>, <span class="string">&#x27;icon-zhuye&#x27;</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">banner</span>: &#123;</span><br><span class="line">        <span class="attr">home</span>: &#123;</span><br><span class="line">          <span class="comment">// 主页banner标语, 随机从数组中获取一条文字显示</span></span><br><span class="line">          <span class="attr">title</span>: [<span class="string">&#x27;每一个不曾起舞的日子，都是对生命的辜负。&#x27;</span>, <span class="string">&#x27;为者常成，行者常至。&#x27;</span>, <span class="string">&#x27;逝者如斯夫，不舍昼夜。&#x27;</span>, <span class="string">&quot;相逢的还会再相逢。&quot;</span>],</span><br><span class="line">          <span class="comment">// 主页banner图片</span></span><br><span class="line">          <span class="attr">background</span>: [</span><br><span class="line">              <span class="string">&quot;https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/Machine_tool.jpg&quot;</span>,</span><br><span class="line">              <span class="string">&quot;https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/horse.jpg&quot;</span>,</span><br><span class="line">              <span class="string">&quot;https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/background.jpg&quot;</span>,</span><br><span class="line">              <span class="string">&quot;https://raw.githubusercontent.com/all-smile/nav/master/static/images/sunset.jpg&quot;</span>,</span><br><span class="line">              <span class="string">&quot;https://raw.githubusercontent.com/all-smile/nav/master/static/images/sunset02.jpg&quot;</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 失去焦点标签文字</span></span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">onblur</span>: <span class="string">&#x27;(oﾟvﾟ)ノ Hi&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 页面加载loading。</span></span><br><span class="line">      <span class="attr">loading</span>: &#123;</span><br><span class="line">        <span class="attr">rebound</span>: &#123;</span><br><span class="line">          <span class="attr">tension</span>: <span class="number">16</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">spinner</span>: &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="string">&#x27;spinner&#x27;</span>,</span><br><span class="line">          <span class="attr">radius</span>: <span class="number">90</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 页脚模式</span></span><br><span class="line">      <span class="attr">footer</span>: &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">text</span>: &#123;</span><br><span class="line">          <span class="attr">left</span>: <span class="string">&#x27;蓄之既久，其发必速。&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 友情链接</span></span><br><span class="line">      <span class="attr">links</span>: &#123;</span><br><span class="line">        <span class="comment">// 文章底部显示添加友链入口（博客园发送消息）</span></span><br><span class="line">        <span class="attr">footer</span>: [</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            格式：</span></span><br><span class="line"><span class="comment">            Key	Description</span></span><br><span class="line"><span class="comment">            name	昵称</span></span><br><span class="line"><span class="comment">            introduction	简介</span></span><br><span class="line"><span class="comment">            avatar	头像</span></span><br><span class="line"><span class="comment">            url	友链地址</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            [<span class="string">&quot;添加友链&quot;</span>, <span class="string">&#x27;https://msg.cnblogs.com/send/甜点cc&#x27;</span>],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 右下角菜单</span></span><br><span class="line">      <span class="attr">rtMenu</span>: &#123;</span><br><span class="line">        <span class="attr">qrCode</span>: <span class="string">&#x27;https://xxx.jpg&#x27;</span>, <span class="comment">// 自己设置</span></span><br><span class="line">        <span class="attr">reward</span>: &#123;</span><br><span class="line">          <span class="attr">wechatpay</span>: <span class="string">&#x27;https:xxx.jpg&#x27;</span> <span class="comment">// 自己设置</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">animate</span>: &#123;</span><br><span class="line">        <span class="comment">// 主页banner动效配置。</span></span><br><span class="line">        <span class="attr">homeBanner</span>: &#123;</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">radius</span>: <span class="number">15</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 文章页标题动效配置。</span></span><br><span class="line">        <span class="attr">articleTitle</span>: &#123;</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 文章页banner动效配置</span></span><br><span class="line">        <span class="attr">articleBanner</span>: &#123;</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 背景动效。</span></span><br><span class="line">        <span class="attr">background</span>: &#123;</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 跟随鼠标动效。</span></span><br><span class="line">        <span class="attr">mouse</span>: &#123;</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 友链配置</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">cnblogsConfig</span>.<span class="property">links</span>.<span class="property">page</span> = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;甜点cc&#x27;</span>, <span class="comment">// 昵称</span></span><br><span class="line">        <span class="attr">introduction</span>: <span class="string">&#x27;博客&#x27;</span>, <span class="comment">// 简介</span></span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">&#x27;https://pic.cnblogs.com/avatar/1037867/20220801164532.png&#x27;</span>, <span class="comment">// 头像</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://home.i-xiao.space/blog/&#x27;</span> <span class="comment">// 友链地址</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@v2.1.0/dist/simpleMemory.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>上面配置中 加载的 js 脚本，要和 上一步的CSS外链同一个版本（这里是V2.1.0），否则可能会不生效或者出现别的问题</li>
</ul>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ol>
<li><p>主题相关文件（css\js等）可以自己托管维护，可以自行扩展界面交互</p>
</li>
<li><p>图片等静态资源可以自行寻找免费图床。当然也可以自己放到<code>GitHub</code>上面托管，采用CDN访问（参考<a href="https://juejin.cn/post/7120973719346151431">这里</a>）</p>
</li>
<li><p>托管到博客园上</p>
</li>
</ol>
<p><img src="https://files.mdnice.com/user/34064/a78174d3-0b7f-4ac3-8bb8-b0e86f79751e.png"></p>
<ol start="4">
<li>图片等静态资源也可以自行搭建云盘使用😏</li>
</ol>
<p>👉 方式很多，顺手就行 👈</p>
<p>我的博客园主页请看<a href="https://www.cnblogs.com/all-smile">这里</a>😊欢迎来访问呀🌹</p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>博客评论插件Beaudar安装使用</title>
    <url>/blog/posts/34114278.html</url>
    <content><![CDATA[<h2 id="Beaudar"><a href="#Beaudar" class="headerlink" title="Beaudar"></a>Beaudar</h2><p>基于 GitHub issue 的轻量评论插件，Utterances 的中文版本，官网在<a href="https://beaudar.lipk.org/">这里</a></p>
<h2 id="Beaudar-是如何工作的？"><a href="#Beaudar-是如何工作的？" class="headerlink" title="Beaudar 是如何工作的？"></a>Beaudar 是如何工作的？</h2><p>Beaudar 加载时，将使用 GitHub issue 搜索 API 根据 url，“路径名”或“标题”查找与页面相关的 issue。如果找不到与页面匹配的 issue，即没有评论，当有人首次发表评论时，Beaudar-bot 会自动创建一个 issue。</p>
<h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><ol>
<li>准备</li>
</ol>
<p>Beaudar 的配置方法很简单，创建一个仓库<a href="https://github.com/all-smile/blog-comments"><code>blog-comments</code></a>，在仓库中创建一个域名白名单文件<code>beaudar.json</code>，然后在<a href="https://github.com/apps/beaudar">此处</a>授权安装即可。</p>
<p><code>beaudar.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;origins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://localhost:4000&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>Hexo</code>配置</li>
</ol>
<p>在主题配置文件里<code>_config_[theme].yml</code>里面增加如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 评论 [beaudar](https://beaudar.lipk.org/) 插件</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">beaudar</span></span><br><span class="line">  <span class="attr">beaudar:</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">all-smile/blog-comments</span> <span class="comment"># 指向你自己的repo</span></span><br></pre></td></tr></table></figure>

<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>使用<code>GitHub</code>登录后评论</p>
<p><img src="https://pic.imgdb.cn/item/6315b40c16f2c2beb16136d9.jpg"></p>
<h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><ol>
<li><code>blog-comments</code> 仓库默认分支为<code>main</code></li>
</ol>
<p><img src="https://pic.imgdb.cn/item/6315b22716f2c2beb15ee173.jpg"></p>
<p><strong>解决：</strong></p>
<p>进入<code>blog-comments</code> 仓库，在 settings -&gt; branches 里面，修改 <code>Default branch</code> 为 <code>main</code></p>
<ol start="2">
<li><code>Hexo</code> 本地服务测试<code>Beaudar</code>，添加白名单配置</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/6315b2a816f2c2beb15f64b2.jpg"></p>
<p><strong>解决：</strong></p>
<p>修改<code>beaudar.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;origins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://localhost:4000&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>多路径来源页面导航高亮以及面包屑导航修改</title>
    <url>/blog/posts/2025032412.html</url>
    <content><![CDATA[<h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>这个问题比较普遍，原因是业务方面对产品进行多维度的划分（或者对产品进行归档、打标签、收藏等等），反应在前端方面就是同一个页面可以有不同的入口（产品目录结构划分）</p>
<p>干说不如举个例子：</p>
<ol>
<li><p>“活期储蓄”产品属于负债类理财产品（导航菜单）</p>
</li>
<li><p>关注“活期储蓄”产品</p>
</li>
<li><p>在“我的关注”菜单里也存在“活期储蓄”产品</p>
</li>
</ol>
<p>从上面的描述中不难发现，“活期储蓄”产品既可以从“负债类理财产品”菜单进入，也可以从“我的关注”菜单进入。</p>
<p>这就带来了两个问题：</p>
<ol>
<li><p>当进入“活期储蓄”产品详情页面的时候，高亮哪个导航菜单</p>
</li>
<li><p>当进入“活期储蓄”产品详情页面的时候，面包屑导航怎么显示</p>
</li>
</ol>
<p>从用户角度来说自然是我从哪里点进去的就高亮哪个菜单，面包屑也真实的反应“来源路径”</p>
<h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>项目采用的技术： Vue，Element UI，vue-router</p>
<p>采用的 element ui 的 导航组件和面包屑组件。</p>
<p>面包屑是借助 vue-router 的 matched 方法 匹配到的路由对象数据注入ui组件实现的</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul>
<li><p>如果可以从后端数据上进行处理当然更好，现实是没有如果。</p>
</li>
<li><p>前端处理，分别针对导高亮和面包屑处理</p>
</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol>
<li><p>在进入详情页面的行为中增加标记（我使用 sessionStorage 标记，标记信息包括路径path、title，path用于高亮导航，title用于面包屑展示）</p>
</li>
<li><p>在离开详情页的时候移除标记（通过路由守卫实现，目的是标记不会带来别的副作用）</p>
</li>
<li><p>根据标记修正菜单高亮、面包屑展示</p>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>分析完之后发现写代码就跟玩一样，没有什么技术含量，就不贴代码了</p>
<p>有一点需要注意：</p>
<p>在上面思路分析中，当进入详情页，刷新页面，可能会存在时序问题，具体就是面包屑组件里标记信息不能及时同步，这里我采用的是在<code>data</code>上面定义属性<code>signTitle</code>承接<code>sessionStorage</code>，然后在 <code>computed</code> 里面以<code>signTitle</code>为源数据得到最新的标记信息</p>
<p>可以使用全局状态管理方式替代sessionStorage，状态持久化就可以了</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>多路由复用页面组件问题</title>
    <url>/blog/posts/3277520678.html</url>
    <content><![CDATA[<hr>
<h2 id="theme-channing-cyan"><a href="#theme-channing-cyan" class="headerlink" title="theme: channing-cyan"></a>theme: channing-cyan</h2><p>携手创作，共同成长！这是我参与「掘金日新计划 · 8 月更文挑战」的第20天，<a href="https://juejin.cn/post/7123120819437322247" title="https://juejin.cn/post/7123120819437322247">点击查看活动详情</a></p>
<blockquote>
<p>本文围绕 <code>Vue Router</code> 中路由组件复用问题展开</p>
</blockquote>
<h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>项目中经常会遇到<code>增改查</code>的需求，通常采用不同的路由指向同一个页面组件，以此到达复用页面的功能，但是复用页面存在一些状态问题。</p>
<p><strong>以下情况均不缓存页面：</strong></p>
<p>分两种情况，均为动态路由匹配</p>
<ul>
<li><p>(1) 路由a: <code>/detail/1</code>， 路由b: <code>/detail/2</code> 。   路由表里匹配<code>/detail/:id</code></p>
</li>
<li><p>(2) 路由A: <code>/new-detail/1</code>， 路由B: <code>/edit-detail/1</code> 。 路由表里匹配<code>/new-detail/:id</code>， 和  <code>/edit-detail/:id</code></p>
</li>
</ul>
<p><em>这四个不同的url，注册的是同一个页面组件</em></p>
<p>在场景（1）中，切换页面，只调用<code>beforeRouteUpdate</code>钩子函数，不调用<code>beforeRouteEnter、mounted</code>等，可以监听到<code>$route</code>，并获取到激活组件里面的数据，不会错乱</p>
<p>在场景（2）中，切换页面，调用<code>beforeRouteEnter</code>钩子函数，不调用<code>created、mounted</code>等生命周期钩子</p>
<h2 id="beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）"><a href="#beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）" class="headerlink" title="beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）"></a>beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）</h2><p>在当前路由改变，但是该组件被复用时调用，举例来说，对于一个带有动态参数的路径 <code>/foo/:id</code>，在 <code>/foo/1</code> 和 <code>/foo/2</code> 之间跳转的时候</p>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>文档请看<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html">这里</a></p>
<h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><p>当使用路由参数时，例如从 <code>/user/foo</code> 导航到 <code>/user/bar</code>，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。</p>
<p>复用组件时，想对路由参数的变化作出响应的话，有两种方法</p>
<ol>
<li><p><em>watch (监测变化) $route 对象</em></p>
</li>
<li><p><em>使用 2.2 中引入的 beforeRouteUpdate 导航守卫</em></p>
</li>
</ol>
<p>使用<code>beforeRouteUpdate</code>的时候，如果路由里面通过<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F">布尔模式</a>：<code>props: true</code> <em>将组件和路由解耦</em>，这个时候会出现<code>props</code>获取错误的情况，比方说从<code>/foo/1</code>页面切换到<code>/foo/2</code>页面的时候，在<code>beforeRouteUpdate</code>获取到的还是失活页面组件的id</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e3239903789492b9d80745409c3afa9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<blockquote>
<p><em>在<code>beforeRouteUpdate</code>钩子中，在<code>next</code>回调函数中编写代码并没有执行，仿佛没有调用，但是去掉<code>next()</code>，路由就不会放行，有点奇怪。需要阅读源码实现逻辑…</em></p>
</blockquote>
<h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ol>
<li><p>导航被触发</p>
</li>
<li><p>beforeRouteLeave（失活组件里调用） 可以访问组件实例 <code>this</code></p>
</li>
<li><p>beforeEach（全局前置钩子）</p>
</li>
<li><p>beforeRouteUpdate（如果是重用组件，则调用） 可以访问组件实例 <code>this</code></p>
</li>
<li><p>beforeEnter（路由配置里，路由独享的）</p>
</li>
<li><p>解析异步路由组件（如果有）</p>
</li>
<li><p>beforeRouteEnter（被激活组件里调用）</p>
</li>
<li><p>beforeResolve（全局解析守卫）</p>
</li>
<li><p>导航被确认</p>
</li>
<li><p>afterEach（全局后置钩子）</p>
</li>
<li><p>触发 DOM 更新。</p>
</li>
<li><p><em>beforeRouteEnter （调用守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。next(vm) &#x3D;&gt; {}）</em></p>
</li>
</ol>
<p>接着调用<code>created、mounted</code>等等</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的SSH，你了解多少？（长文警告）</title>
    <url>/blog/posts/184663689.html</url>
    <content><![CDATA[<h1 id="1、SSH工作原理"><a href="#1、SSH工作原理" class="headerlink" title="1、SSH工作原理"></a>1、SSH工作原理</h1><p>从ssh的<strong>加密方式</strong>说开去，看下文👇</p>
<h2 id="1-1、对称加密"><a href="#1-1、对称加密" class="headerlink" title="1.1、对称加密"></a>1.1、对称加密</h2><p>客户端和服务端采用相同的密钥进行数据的加解密，很难保证密钥不丢失，或者被截获。隐藏着<strong>中间人攻击</strong>的风险</p>
<blockquote>
<p>如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就不存在了。这种风险就是著名的”中间人攻击”（<code>Man-in-the-middle attack</code>）</p>
</blockquote>
<p>为了解决对称加密的漏洞，就出现了非对称加密。非对称加密有两个密钥：“公钥”和“私钥”。公钥加密后的密文，只能通过对应的私钥进行解密。想从公钥推理出私钥几乎不可能，所以非对称加密的安全性比较高。</p>
<h2 id="1-2、非对称加密"><a href="#1-2、非对称加密" class="headerlink" title="1.2、非对称加密"></a>1.2、非对称加密</h2><p><strong>ssh连接远程git仓库时的登录验证原理</strong>：本地主机向远程主机发送登录请求，远程主机收到请求后，返回给本地主机一个随机字符串A，本地主机用私钥加密字符串A得到密文B，并把密文B发送给远程主机，远程主机用公钥解密密文A得到字符串B，并判断A是否等于B，如果相等，则认证成功，反之，则反之。<br>不在要求使用密码登录，以公私钥的方式实现免密登录</p>
<p><img src="https://pic.imgdb.cn/item/63119b6b16f2c2beb1e029b5.png"></p>
<h2 id="1-3、基于口令和公钥认证"><a href="#1-3、基于口令和公钥认证" class="headerlink" title="1.3、基于口令和公钥认证"></a>1.3、基于口令和公钥认证</h2><p>只有在第一次连接的时候需要，通信双方验证身份之后就可以通过在客户端的私钥和你存放在服务器的公钥进行认证。(通过服务器上的公钥加密，客户端的私钥解密来验证)</p>
<p><strong>第一次登录：</strong></p>
<blockquote>
<p>如果不是第一次登录，想看一下效果的话，可以修改一下本地的 <code>~/.ssh/known_hosts</code> 文件名（<code>~/.ssh/known_hosts</code>文件中保存的是已经认证过的公钥信息），重命名该文件之后，相当于清空了认证过的公钥信息，再次连接的时候就会重新认证😁😁</p>
</blockquote>
<ol>
<li>ssh连接远程主机</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitcode.net:xxx.git</span><br><span class="line">Cloning into <span class="string">&#x27;xxx&#x27;</span>...</span><br><span class="line">The authenticity of host <span class="string">&#x27;gitcode.net (119.3.229.170)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:pyrMa3p0o90Qsuz2+kMX3CIBl+S1cZsdRlCoaosSg00Qs.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])?yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>gitcode.net,119.3.229.170<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看 known_hosts 文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看known_hosts文件</span></span><br><span class="line">$ <span class="built_in">cat</span> known_hosts</span><br><span class="line">gitcode.net,119.3.229.170 ssh-rsa AAAAB3NzaC1yc2EAAAL......</span><br></pre></td></tr></table></figure>

<ul>
<li><p>因为公钥长度较长（采用<code>RSA</code>算法），很难比对，所以对其进行<code>MD5</code>计算，将它变成一个128位的指纹，如上<code>fingerprint</code>，这样比对就容易多了。</p>
</li>
<li><p>当远程主机的公钥被接受以后，它就会被永久保存在文件 <code>~/.ssh/known_hosts</code> 文件之中，下次再登录就会跳过<code>Warning</code>部分</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/63119b8216f2c2beb1e035eb.png" alt="该图来源网络，侵删"><br>上图来源网络，侵删</p>
<blockquote>
<p>下面以多个主机配置<code>ssh</code>连接时怎么指定使用哪个公钥为切入点，讲解<code>ssh config</code>。讲透、看爽！</p>
</blockquote>
<h1 id="2、多个代码仓库配置ssh连接问题"><a href="#2、多个代码仓库配置ssh连接问题" class="headerlink" title="2、多个代码仓库配置ssh连接问题"></a>2、多个代码仓库配置ssh连接问题</h1><p>SSH 是连接远程主机最常用的方式，尽管连接到单个主机的基本操作非常直接，但当你开始使用大量的远程系统时（比如：配置多个代码托管平台的ssh），这就会成为笨重和复杂的任务。</p>
<p>幸运的是，<a href="https://www.ssh.com/academy/ssh/openssh">OpenSSH</a> 允许您提供自定义的客户端连接选项。这些选项可以被存储到一个配置文件中，这个配置文件可以用来定义每个主机的配置。这有助于保持每个主机的连接选项更好的独立和组织，也你让你在需要连接时避免在命令行中写繁琐的选项。</p>
<p>目前我使用的代码托管平台有<code>GitHub、Gitee、Gitlab、Gitcode</code>（瞎折腾👀），即使只使用一个平台，比如 gitlab，也会存在公司账号跟个人账号的ssh配置问题，下面讲解ssh连接远程主机时怎么指定使用哪个公钥</p>
<blockquote>
<p>下面展示都在Windows 系统下</p>
</blockquote>
<h1 id="3、ssh-config-自定义主机配置"><a href="#3、ssh-config-自定义主机配置" class="headerlink" title="3、ssh config 自定义主机配置"></a>3、ssh config 自定义主机配置</h1><h2 id="3-1、ssh-config-介绍"><a href="#3-1、ssh-config-介绍" class="headerlink" title="3.1、ssh config 介绍"></a>3.1、ssh config 介绍</h2><p>解决多个ssh密钥使用问题的<strong>最佳方案</strong>就是通过维护一个本地配置 <code>config</code>，指定主机使用哪个密钥。</p>
<blockquote>
<p>其他方案：（需要连接的主机多了同样很难管理，不建议使用，了解即可）</p>
<ol>
<li><p>设置环境变量<code>GIT_SSH_COMMAND</code>解决</p>
</li>
<li><p>指定命令行参数：<code>ssh -i ~/.ssh/xxx.pub -p 22  www.example.com</code></p>
</li>
</ol>
</blockquote>
<p>用户级设置的路径: <code>~/.ssh/config</code></p>
<h3 id="3-1-1、文件格式"><a href="#3-1-1、文件格式" class="headerlink" title="3.1.1、文件格式"></a>3.1.1、文件格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host firsthost</span><br><span class="line">    SSH_OPTIONS_1 custom_value</span><br><span class="line">    SSH_OPTIONS_2 custom_value</span><br><span class="line">    SSH_OPTIONS_3 custom_value</span><br><span class="line"></span><br><span class="line">Host secondhost</span><br><span class="line">    ANOTHER_OPTION custom_value</span><br><span class="line"></span><br><span class="line">Host *host</span><br><span class="line">    ANOTHER_OPTION custom_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公用配置在最下面</span></span><br><span class="line">Host *</span><br><span class="line">    CHANGE_DEFAULT custom_value</span><br></pre></td></tr></table></figure>
<p>解释：Host：ssh连接主机的别称 alias</p>
<h3 id="3-1-2、尝鲜一下"><a href="#3-1-2、尝鲜一下" class="headerlink" title="3.1.2、尝鲜一下"></a>3.1.2、尝鲜一下</h3><p>本地系统的每个用户都可以维护一个客户端的 SSH 配置文件，这个配置文件可以包含你在命令行中使用 ssh 时参数，也可以存储公共连接选项并在连接时自动处理。你可以在命令上中使用 ssh 来指定 flag ，以覆盖配置文件中的选项。<br>看一个例子：</p>
<ul>
<li>ssh命令行的方式：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/xxx -p 22 -l admin \ www.example.com</span><br></pre></td></tr></table></figure>
<p>上面的命令可以转换成 <code>config</code> 的形式，如下：</p>
<ul>
<li><code>ssh/config</code> 定义主机连接参数配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">	Hostname www.example.com</span><br><span class="line">	<span class="comment"># User admin</span></span><br><span class="line">	Port 22</span><br><span class="line">	IdentityFile ~/.ssh/xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共配置， 必须在文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  User admin</span><br></pre></td></tr></table></figure>

<h2 id="3-2、解释算法"><a href="#3-2、解释算法" class="headerlink" title="3.2、解释算法"></a>3.2、解释算法</h2><p>它从文件顶部向下执行此操作，所以顺序非常重要，了解这个之后，方便我们写出更好的主机定义配置选项、方便运维管理。</p>
<p>当匹配到第一个主机定义时，并不会终止，而是继续往下查找，检查是否有其他匹配的 Host 定义。如果有另一个 Host 定义匹配，SSH 将该 Host 定义下的配置选项跟前面匹配到的主机定义配置选项合并（<strong>随着继续往下读取配置，最终配置选项是叠加的</strong>）</p>
<h2 id="3-3、ssh-config-的工作原理✨"><a href="#3-3、ssh-config-的工作原理✨" class="headerlink" title="3.3、ssh_config 的工作原理✨"></a>3.3、ssh_config 的工作原理✨</h2><h3 id="3-3-1、ssh-客户端按以下顺序从三个地方读取配置："><a href="#3-3-1、ssh-客户端按以下顺序从三个地方读取配置：" class="headerlink" title="3.3.1、ssh 客户端按以下顺序从三个地方读取配置："></a>3.3.1、ssh 客户端按以下顺序从三个地方读取配置：</h3><ol>
<li><p>系统范围内 <code>/etc/ssh/ssh_config</code>（适用与主机下的所有用户，系统级 System）</p>
</li>
<li><p>用户特定的 <code>~/.ssh/config</code> （用户级）</p>
</li>
<li><p>ssh直接提供给的命令行标志 （命令参数可以重写已有的固定配置）</p>
</li>
</ol>
<p>我通常使用的用户级的配置，下面是我个人的配置，仅供参考：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitcode - csdn</span></span><br><span class="line">Host gitcode.net</span><br><span class="line">  HostName gitcode.net</span><br><span class="line">  Preferredauthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/gitcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">  HostName gitlab.com</span><br><span class="line">  IdentityFile ~/.ssh/gitlab-rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享配置，文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  <span class="comment"># 认证方式首选 publickey(公钥)， 可选： publickey,gssapi-keyex,gssapi-with-mic,password</span></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User git <span class="comment"># ssh [Host] === ssh [User]@[HostName]</span></span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ul>
<li><p>Host：ssh的别称</p>
<p>比如 Host 设置成 xiao ，使用的时候 ssh xiao（注意设置User）</p>
</li>
<li><p>HostName： 服务器的地址</p>
</li>
<li><p>PreferredAuthentications : 认证方式</p>
<p>可选： <code>publickey,gssapi-keyex,gssapi-with-mic,password</code></p>
</li>
<li><p>IdentityFile: 指定连接HostName的密钥文件的路径</p>
</li>
</ul>
<h3 id="3-3-2、主机别名设置例子"><a href="#3-3-2、主机别名设置例子" class="headerlink" title="3.3.2、主机别名设置例子"></a>3.3.2、主机别名设置例子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host dev1</span><br><span class="line">    HostName dev1.example.com</span><br><span class="line">    User jeery</span><br></pre></td></tr></table></figure>

<p>现在要连接到 <code>jeery@dev1.example.com</code>，就可以通过在命令行中输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh dev1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">ssh jeery@dev1.example.com</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3、git-仓库连接别名设置例子"><a href="#3-3-3、git-仓库连接别名设置例子" class="headerlink" title="3.3.3、git 仓库连接别名设置例子"></a>3.3.3、git 仓库连接别名设置例子</h3><p><img src="https://pic.imgdb.cn/item/63119ba916f2c2beb1e0475e.png"></p>
<h2 id="3-4、连接问题"><a href="#3-4、连接问题" class="headerlink" title="3.4、连接问题"></a>3.4、连接问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\xiao\.ssh&gt;vim .\config</span><br><span class="line">PS C:\Users\xiao\.ssh&gt;ssh -T git@gitcode.net</span><br><span class="line">Bad owner or permissions on C:\\Users\\xiao/.ssh/config</span><br><span class="line">PS C:\Users\xiao\.ssh&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解决：</strong></p>
<p>修改 config 文件 权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line"><span class="built_in">chmod</span> 600 config</span><br></pre></td></tr></table></figure>

<h1 id="4、git仓库设置ssh连接"><a href="#4、git仓库设置ssh连接" class="headerlink" title="4、git仓库设置ssh连接"></a>4、git仓库设置ssh连接</h1><p>下面演示我的设置步骤，仅供参考</p>
<h2 id="4-1、本地生成公私钥对"><a href="#4-1、本地生成公私钥对" class="headerlink" title="4.1、本地生成公私钥对"></a>4.1、本地生成公私钥对</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -o -t rsa -C <span class="string">&quot;yourmail&quot;</span> -b 4096</span><br></pre></td></tr></table></figure>

<p>🔊 记得设置<code>key</code>的名字哟，默认是 <code>id_rsa</code>（如果不设置<code>key</code>，新生成的 <code>id_rsa</code> 文件会覆盖原有的<code>id_rsa</code>文件，之前添加过的就不能用啦！），参考下图👇</p>
<p><img src="https://pic.imgdb.cn/item/63119bba16f2c2beb1e054d6.png"></p>
<h2 id="4-2、配置远程主机ssh"><a href="#4-2、配置远程主机ssh" class="headerlink" title="4.2、配置远程主机ssh"></a>4.2、配置远程主机ssh</h2><p>登录要连接的远程主机，这里演示 <a href="https://gitcode.net/dashboard/projects/home">gitcode</a> 平台</p>
<p><img src="https://pic.imgdb.cn/item/63119bc716f2c2beb1e06187.png"></p>
<h2 id="4-3、设置-ssh-config"><a href="#4-3、设置-ssh-config" class="headerlink" title="4.3、设置 ssh_config"></a>4.3、设置 ssh_config</h2><p>这里我统一维护在 <code>~/.ssh/config</code>里面维护，增加<code>gitcode</code>主机定义配置， 如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitcode - csdn</span></span><br><span class="line">Host gitcode.net</span><br><span class="line">  HostName gitcode.net</span><br><span class="line">  IdentityFile ~/.ssh/gitcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共用配置，文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  <span class="comment"># 认证方式首选 publickey(公钥), 可选: publickey,gssapi-keyex,gssapi-with-mic,password</span></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User git <span class="comment"># ssh [Host] === ssh [User]@[HostName]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4、测试连接"><a href="#4-4、测试连接" class="headerlink" title="4.4、测试连接"></a>4.4、测试连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xiao@LAPTOP-L6TI0438 MINGW64 ~/.ssh</span><br><span class="line">ssh -T gitagitcode.net</span><br><span class="line">Welcome to GitLab,@heyYouU!</span><br><span class="line">xiao@LAPTOP-L6TI0438 MINGW64 ~/.ssh</span><br></pre></td></tr></table></figure>

<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>相信看完上面的讲解，会对ssh理解的更清除一点。So，快来更换 ssh 试试吧</p>
<p><strong>连接远程仓库可以选择https，也可以选择ssh</strong></p>
<p>区别：</p>
<ol>
<li><p>https 连接有文件传输大小限制，ssh没有</p>
</li>
<li><p>ssh传输速度比https协议快</p>
</li>
<li><p>https 连接提交代码的时候需要输入账户密码登录，ssh则是以公私钥加解密随机数的方式免密登录</p>
</li>
</ol>
<p>连接仓库的方式可以转换，如： https 转成 ssh，比较简单，不作介绍。</p>
<p>SSH东西超多的，光 SSH 配置选项就几十个，本文抛砖引玉，大家可以继续往下探索🎉🎉</p>
<p>参考文档：</p>
<ul>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-custom-connection-options-for-your-ssh-client">https://www.digitalocean.com/community/tutorials/how-to-configure-custom-connection-options-for-your-ssh-client</a></p>
</li>
<li><p><a href="http://www.bjpowernode.com/hot/2664.html">http://www.bjpowernode.com/hot/2664.html</a></p>
</li>
</ul>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Chrome扩展插件</title>
    <url>/blog/posts/9575625.html</url>
    <content><![CDATA[<hr>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>现如今的时代，绝大多数人都要跟浏览器打交道的，说到浏览器那肯定是<code>Chrome</code>浏览器一家独大，具体数据请看👇</p>
<p>知名流量监测机构 <a href="https://statcounter.com/">Statcounter</a> 公布了 7 月份全球桌面浏览器市场份额，主要数据如下：</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>市场份额</th>
<th>月涨跌份额</th>
</tr>
</thead>
<tbody><tr>
<td>Chrome</td>
<td>66.19%</td>
<td>-0.74%</td>
</tr>
<tr>
<td>Edge</td>
<td>10.84%</td>
<td>+0.2%</td>
</tr>
<tr>
<td>Safari</td>
<td>8.94%</td>
<td>+0.01%</td>
</tr>
<tr>
<td>Firefox</td>
<td>8.08%</td>
<td>+0.28%</td>
</tr>
<tr>
<td>Opera</td>
<td>3.06%</td>
<td>+0.08%</td>
</tr>
<tr>
<td>IE</td>
<td>0.75%</td>
<td></td>
</tr>
</tbody></table>
<p><strong>浏览器扩展插件的用途</strong></p>
<ul>
<li><p>生产力工具（和浏览器进行交互：标签、书签、下载、代理、cookie等）</p>
</li>
<li><p>网页内容丰富（改变浏览器外观、桌面通知、右键菜单、定制新标签页）</p>
</li>
<li><p>信息聚合（更像是一个<em>快应用</em>，类似小程序）</p>
</li>
<li><p>乐趣和游戏（小恐龙（<code>chrome://dino/</code>）游戏，想必都玩过）</p>
</li>
</ul>
<p>总之扩展程序让浏览器的功能更加强大，更加贴合用户使用。不管是不是软件开发人员，或多或少都会使用到浏览器扩展插件，常见的比如：书签、网页翻译、广告屏蔽……</p>
<p>学习Chrome扩展插件势在必行🏃‍♂️🐱‍🏍</p>
<ul>
<li><p>Chrome extensions <a href="https://developer.chrome.com/docs/extensions/">文档</a></p>
</li>
<li><p>插件的架构可以参考<a href="https://developer.chrome.com/docs/extensions/mv3/architecture-overview/">这里</a></p>
</li>
<li><p>Chrome扩展程序应用商店<a href="https://chrome.google.com/webstore/category/extensions">入口</a></p>
</li>
<li><p>管理使用chrome扩展。访问 url: <code>chrome://extensions</code>，打开开发者模式</p>
</li>
</ul>
<p>扩展程序是基于 Web 技术（如 HTML、CSS 和 JavaScript）构建的软件程序，使用户能够自定义 Chrome 浏览体验。（前端开发人员技能范围之内😁😁）</p>
<p>本文从应用着手，通过讲解扩展插件的特性来启发读者对其进一步探索。</p>
<h2 id="2、Chrome-extensions-和-Chrome-Plugin的区别"><a href="#2、Chrome-extensions-和-Chrome-Plugin的区别" class="headerlink" title="2、Chrome extensions 和 Chrome Plugin的区别"></a>2、Chrome extensions 和 Chrome Plugin的区别</h2><ul>
<li><p>Chrome Extension（Chrome扩展插件）仅仅是用来增强浏览器网页的功能，它是利用浏览器提供的已有功能和和各种API，进行功能组合，从而改善浏览器体验，停留在<strong>浏览器层面</strong>；</p>
</li>
<li><p>Chrome Plugin（Chrome插件）不仅能增强网页的功能，同时能够扩展浏览器本身的功能；当浏览器提供的功能已经无法满足你的需求，就需要你通过C&#x2F;C++这样的编译语言来扩展浏览器的功能，例如我们常用的Flash 插件，Chrome Plugin工作在<strong>内核层面</strong>。</p>
</li>
</ul>
<h2 id="3、扩展如何工作"><a href="#3、扩展如何工作" class="headerlink" title="3、扩展如何工作"></a>3、扩展如何工作</h2><ul>
<li><p>扩展是基于 HTML、JavaScript 和 CSS 等 Web 技术构建的。它们在单独的沙盒执行环境中运行，并与 Chrome 浏览器交互。</p>
</li>
<li><p>扩展允许您通过使用 API 修改浏览器行为和访问 Web 内容来“扩展”浏览器。扩展通过最终用户 UI 和开发人员 API 进行操作：</p>
</li>
<li><p>扩展用户界面 这为用户提供了一种一致的方式来管理他们的扩展。</p>
</li>
<li><p><a href="https://developer.chrome.com/docs/extensions/reference/">扩展 API</a>允许扩展代码访问浏览器本身的功能：激活选项卡、修改网络请求等。</p>
</li>
</ul>
<p>要创建扩展，您需要组合一些资源清单: <code>manifest.json</code>、 <code>JavaScript</code>、 <code>HTML</code> 和 <code>CSS</code> 文件、图片等。</p>
<h2 id="4、Chrome扩展文件"><a href="#4、Chrome扩展文件" class="headerlink" title="4、Chrome扩展文件"></a>4、Chrome扩展文件</h2><p>Chrome扩展文件以.crx为后缀名，.crx实际上是一个压缩文件，使用解压文件打开这个文件就可以看到其中的文件目录</p>
<p>下图是 <code>Axure</code> 扩展插件原文件：</p>
<p><img src="https://files.mdnice.com/user/34064/ca2c331a-28cf-4cb9-bfcb-10d11f6fff6a.png"></p>
<p>因此可以认为，我们实际上就是写一个Web应用，然后将按照Chrome的规定将一个<strong>快捷方式</strong>放在Chrome工具栏上。如下图：</p>
<p><img src="https://files.mdnice.com/user/34064/ec58ffac-c63b-46a1-b690-42518f1c2fa1.png"></p>
<p>上图中左边地址栏内部的按钮是page action（Chrome插件，直接内置在Chrome里的），右边地址栏外部的是 browser action（Chrome 扩展插件）</p>
<h2 id="5、扩展插件使用"><a href="#5、扩展插件使用" class="headerlink" title="5、扩展插件使用"></a>5、扩展插件使用</h2><p>对于开发和测试，您可以使用扩展开发者模式将这些“解压”加载到 Chrome 中，或者直接拖动<code>crx</code>文件到管理扩展插件页面。如果扩展感到满意，也可以打包并分享给小伙伴使用。</p>
<p><img src="https://files.mdnice.com/user/34064/6339f49c-6dae-4f62-b258-92d082173444.png"></p>
<h2 id="6、popup弹出窗口"><a href="#6、popup弹出窗口" class="headerlink" title="6、popup弹出窗口"></a>6、popup弹出窗口</h2><ul>
<li><p><code>popup.html</code>可以在里面放置任何<code>html</code>元素，它的宽度是自适应的。当然，这个弹出窗口不会被Chrome拦截</p>
</li>
<li><p>popup 无法通过程序打开，只能由用户点击打开。点击 popup 之外的区域会导致 popup 收起。</p>
</li>
</ul>
<p>下图是 <code>FeHelper</code> 扩展插件的弹出窗👇</p>
<p><img src="https://files.mdnice.com/user/34064/14200a5e-9f68-4d3b-acb5-ab07a13fbe30.png"></p>
<h2 id="7、Background-Pages后台页面"><a href="#7、Background-Pages后台页面" class="headerlink" title="7、Background Pages后台页面"></a>7、Background Pages后台页面</h2><p><img src="https://files.mdnice.com/user/34064/4bc20695-7737-4bc3-8b56-791933620bf6.png"></p>
<h2 id="8、Chrome扩展插件运行的核心机制"><a href="#8、Chrome扩展插件运行的核心机制" class="headerlink" title="8、Chrome扩展插件运行的核心机制"></a>8、Chrome扩展插件运行的核心机制</h2><p>Chrome扩展插件中比较核心的几个概念：<code>Extension Page</code>、<code>background.js</code>、<code>content_script.js</code></p>
<p>下图展示他们之间的关系，以及如何通信</p>
<p><img src="https://files.mdnice.com/user/34064/7ddafef3-f22d-4269-b637-e253a38b3c2d.png"><br>（图片来源网络，侵删）</p>
<p>运行时的三个进程：</p>
<ul>
<li><p>扩展进程（Extension Process）</p>
</li>
<li><p>页面渲染进程（Page Render Process）</p>
</li>
<li><p>浏览器进程（Browser Process）</p>
</li>
</ul>
<ol>
<li><strong>扩展进程</strong>中运行<code>Extension Page</code>，主要包括<code>backgrount.html</code>和<code>popup.html</code>,</li>
</ol>
<ul>
<li><p><code> backgrount.html</code>中没有任何内容，是通过<code>background.js</code>创建生成，当浏览器打开时，会自动加载插件的background.js文件，它独立于网页并且一直运行在后台，它主要通过调用浏览器提供的API和浏览器进行交互</p>
</li>
<li><p><code>popup.html</code>有内容的，跟我们普通的web页面一样，由<code>html</code>、<code>css</code>、<code>Javascript</code>组成，它是按需加载的，需要用户去点击地址栏的按钮去触发，才能弹出页面。</p>
</li>
</ul>
<ol start="2">
<li><p><strong>渲染进程</strong>主要运行<code>Web Page</code>,当打开页面时，会将<code>content_script.js</code>加载并注入到该网页的环境中，它和网页中引入的<code>Javascript</code>一样，可以操作该网页的<code>DOM Tree</code>，<em>改变页面的展示效果</em></p>
</li>
<li><p><strong>浏览器进程</strong>在这里更多起到桥梁作用，作为中转可以实现<code>Extension Page</code>和<code>content_script.js</code>之间的消息通信。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文介绍的是 chrome 扩展基础知识，相信看完以上之后，你会对 Chrome 扩展插件有了一个比较清晰的认识。相信chrome扩展会大有作为，会不会迫不急待的要体验一下呢🤔，我根据Chrome插件开发官网示例写的一个小扩展插件，点击<a href="https://github.com/all-smile/myFirstExtension">这里</a>查看项目。</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Chrome插件</tag>
      </tags>
  </entry>
  <entry>
    <title>认识HTTP缓存</title>
    <url>/blog/posts/2358217424.html</url>
    <content><![CDATA[<blockquote>
<p>通常针对静态资源。内存缓存&#x2F;磁盘缓存</p>
</blockquote>
<h2 id="1、原理："><a href="#1、原理：" class="headerlink" title="1、原理："></a>1、原理：</h2><p>在首次请求后，保存一份请求资源的响应副本，当用户再次发起相同请求后，如果判断缓存命中，则拦截请求，将之前存储的相应副本返回给用户，从而避免重新向服务器发起资源请求。</p>
<h2 id="2、缓存的技术种类："><a href="#2、缓存的技术种类：" class="headerlink" title="2、缓存的技术种类："></a>2、缓存的技术种类：</h2><p>代理缓存，浏览器缓存，网关缓存，负载均衡器，内容分发网络</p>
<p>它们大致可以分为两类： 共享缓存，私有缓存</p>
<ul>
<li><p><em>共享缓存</em>：缓存的内容可以被多个用户使用。如公司内部架设的内部Web代理</p>
</li>
<li><p><em>私有缓存</em>：只能单独被用户使用的缓存。如浏览器缓存</p>
</li>
</ul>
<h2 id="3、禁止缓存"><a href="#3、禁止缓存" class="headerlink" title="3、禁止缓存"></a>3、禁止缓存</h2><p>发送如下响应头可以关闭缓存。此外，可以参考<code>Expires</code>和<code>Pragma</code>消息头。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: no-store</span><br></pre></td></tr></table></figure>

<h2 id="4、http缓存可分为强制缓存和协商缓存"><a href="#4、http缓存可分为强制缓存和协商缓存" class="headerlink" title="4、http缓存可分为强制缓存和协商缓存"></a>4、http缓存可分为强制缓存和协商缓存</h2><ul>
<li><p>强制缓存不用判断缓存是否过期，可以直接使用。</p>
</li>
<li><p>协商缓存每次都要询问一下服务器，看一下内容有没有更新，如果没有更新就使用缓存中的资源，如果更新了就继续请求</p>
</li>
</ul>
<p>响应头设置：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eccface9efa421b8430e62444edf4b7~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="4-1、cache-control（http1-1）"><a href="#4-1、cache-control（http1-1）" class="headerlink" title="4.1、cache-control（http1.1）"></a>4.1、cache-control（http1.1）</h3><p><code>cache-control</code>属性值：</p>
<ul>
<li><p>no-cache  强制进行协商缓存</p>
</li>
<li><p>no-store 不缓存</p>
</li>
<li><p>max-age   表示缓存的过期时长</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;cache-control&#x27;: &#x27;max-age=5&#x27; // 滑动时间，单位是秒</span><br></pre></td></tr></table></figure>
</li>
<li><p>private, public： 用以明确响应资源是否可以被代理服务器缓存。</p>
</li>
<li><p>private  只能被浏览器缓存</p>
</li>
<li><p>public  响应资源既可以被浏览器私有缓存，又可以被代理服务器公共缓存</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cache-control: public, max-age=10;</span><br></pre></td></tr></table></figure>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e506a323ebc49449aa316ff302b2116~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab505a1c9bde44c2a1d3d9ae05bc2266~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/483abb75d50347a081dd4cb7562d6817~tplv-k3u1fbpfcp-zoom-1.image"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last-modified: &#x27;&#x27;</span><br><span class="line">if-modified-since:</span><br><span class="line">cache-control: no-cache</span><br></pre></td></tr></table></figure>
<p><strong>原理</strong>:是根据资源最后的<em>修改时间</em>来判断是否需要读取缓存</p>
<blockquote>
<p>根据时间判断有局限性，比方说只改变文件命名，也会引起资源修改时间发生变化，但是对资源本身并没有改动</p>
</blockquote>
<h3 id="4-2、✨补充的方案是ETag（根据文件资源生成指纹）"><a href="#4-2、✨补充的方案是ETag（根据文件资源生成指纹）" class="headerlink" title="4.2、✨补充的方案是ETag（根据文件资源生成指纹）"></a>4.2、✨补充的方案是<strong>ETag</strong>（根据文件资源生成指纹）</h3><ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i etag</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> etag = <span class="built_in">require</span>(<span class="string">&#x27;etag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFilSeync</span>(<span class="string">&#x27;./img/04.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> etagContent = <span class="title function_">etag</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ifNoneMatch = req.<span class="property">headers</span>[<span class="string">&#x27;if-none-match&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ifNoneMatch === etagContent) &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">304</span></span><br><span class="line">  res.<span class="title function_">end</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">// 直接返回，不操作服务器资源，减少带宽</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;etag&#x27;</span>, etagContent)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Cache-Control&#x27;</span>,<span class="string">&#x27;no-cache&#x27;</span>)</span><br><span class="line">res.<span class="title function_">end</span>(data)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>If-None-Match</p>
</li>
<li><p><strong>强验证Etag</strong>，资源细微的改动都会引起指纹的变化</p>
</li>
<li><p><strong>弱验证ETag</strong>， 相对灵活的过滤资源的某些变化</p>
</li>
</ul>
<h2 id="5、强缓存"><a href="#5、强缓存" class="headerlink" title="5、强缓存"></a>5、强缓存</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的Network选项中可以看到该请求返回200的状态码，并且Size显示<code>from disk cache</code>或<code>from memory cache</code>。</p>
<h3 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h3><p>强缓存可以通过设置两种 <code>HTTP Header</code> 实现，分别是：<code>Expires</code> 和 <code>Cache-Control</code>。</p>
<blockquote>
<p>Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；</p>
</blockquote>
<h2 id="6、协商缓存"><a href="#6、协商缓存" class="headerlink" title="6、协商缓存"></a>6、协商缓存</h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p>协商缓存就是强制缓存失效后，浏览器<em>携带缓存标识</em>向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p>
<ul>
<li><p>协商缓存生效，返回<code>304</code>和<code>Not Modified</code></p>
</li>
<li><p>协商缓存失效，返回<code>200</code>和<code>请求结果</code></p>
</li>
</ul>
<h3 id="设置：-1"><a href="#设置：-1" class="headerlink" title="设置："></a>设置：</h3><p>协商缓存可以通过设置两种 HTTP Header 实现, 分别是：<code>Last-Modified</code> 和 <code>ETag</code> 。</p>
<h2 id="7、缓存机制🎉"><a href="#7、缓存机制🎉" class="headerlink" title="7、缓存机制🎉"></a>7、缓存机制🎉</h2><ol>
<li><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(<code>Last-Modified / If-Modified-Since和Etag / If-None-Match</code>)</p>
</li>
<li><p>协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。</p>
</li>
</ol>
<h2 id="8、缓存策略树🎉"><a href="#8、缓存策略树🎉" class="headerlink" title="8、缓存策略树🎉"></a>8、缓存策略树🎉</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b20c21694e940d5acf2b343148bfbbf~tplv-k3u1fbpfcp-zoom-1.image" alt="缓存策略树，很早很早之前画的🤣，现在看看也是醉了😂"></p>
<p align=center>缓存策略树，很早很早之前画的🤣，现在看看也是醉了😂</p>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc8e06075df24102b9989fc1ff0eb797~tplv-k3u1fbpfcp-zoom-1.image" alt="该图来源网络，侵删"></p>
<p align=center>该图来源网络，侵删</p>

<p>更多看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">这里</a></p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个 &#39;奇葩&#39; 需求的实现</title>
    <url>/blog/posts/2156089668.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们这边没有专门的产品经理，<code>UI</code>对产品的设计基本具有决定权，说实话，是有那么一点可怖的（前后改了很多次，差一点就改回原版了，我自己都觉得不好意思了🤣）。个人感觉我们<code>UI</code>还是体验的少，缺乏对产品以及用户行为的认识。设计出来的东西看似很华丽，其实缺失很多场景下的分析，不切合实际，大多数人说的“用户体验”或许只是主观的、想当然的（我也一样😮）。</p>
<p>自从接触互联网开始我就在有意的学习怎么做产品，期间还考虑过转产品，永远不要拿业余的跟专业的比，没什么可比性，不成熟。继续保持思考、学习。</p>
<blockquote>
<p>所用技术：<code>vue</code>、<code>vue-router</code>、<code>element-ui</code></p>
</blockquote>
<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><blockquote>
<p>导航菜单（<code>el-menu</code>组件）竖向展示的</p>
</blockquote>
<ol>
<li><p>鼠标移入一级菜单展示下面的子菜单，移出则收起来（手风琴模式，正常状态下只保持一个菜单处于展开状态，手动鼠标悬浮展开的不算）</p>
</li>
<li><p>选中某个子菜单时高亮对应的一级菜单，并且当鼠标移出高亮的这个菜单模块时不折叠，但是可以点击一级菜单进行折叠（注意：跟第一条有区别）</p>
</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p><code>element-ui</code>的导航组件子菜单打开的触发方式可以通过 <code>menu-trigger</code> 参数控制，但是，只在菜单是水平展示（<code>horizontal</code>）的情况下生效。嘶~！我不禁暗想：垂直模式滑动展开真的会有系统这么做吗？（只能自己修改了）</p>
</li>
<li><p><code>unique-opened</code> 参数可以控制是否只保持一个子菜单展开，但是在没有子菜单的情况下失效（需要手动修改）</p>
</li>
</ol>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>导航菜单使用递归<code>el-submenu</code>组件实现</p>
<ol>
<li>鼠标滑动展开关闭需求：</li>
</ol>
<ul>
<li><code>el-submenu</code> 组件编写鼠标移入移出事件（<code>mouseenter</code>、<code>mouseleave</code>），拿到<code>indexPath</code>，调用<code>open</code>和<code>close</code>方法打开或者折叠菜单（注意：没有子菜单的一级菜单鼠标移入移出不做处理）</li>
</ul>
<ol start="2">
<li>只保持一个菜单出于展开状态</li>
</ol>
<ul>
<li>先配置 <code>unique-opened</code> 参数为 <code>false</code> ，以保证 <code>openedMenus</code> 只有一个（ <code>openedMenus</code> 是<code>el-menu</code>内部维护的属性, 可以自行打印看一下）</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6311ebfb16f2c2beb1163942.jpg"></p>
<blockquote>
<p>一开始我想在子菜单展开折叠的回调事件（<code>open</code>、<code>close</code>）里写逻辑判断，但是不知道什么原因回调事件不触发（注意：<code>open方法</code>和<code>open事件</code>不一样，组件三大要素：<strong>属性、事件、方法</strong>），所以我就考虑在<code>select</code>回调事件里写逻辑了</p>
</blockquote>
<ul>
<li>在菜单激活的<code>select</code>回调事件中，让上一个打开的菜单调用<code>close</code>方法关闭。（这里需要记录上次打开菜单的<code>index</code>，这里我使用<code>sessionStorage</code>记录）</li>
</ul>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>只展示代码片段，仅供参考</p>
<p><code>sessionStorage</code>使用自己封装的，之前文章有写过，感兴趣的可以看一下</p>
<ul>
<li><code>el-submenu</code> 组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">menuEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// isNest 是否还有子菜单 true:没有子菜单 false:有子菜单</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isNest</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">alwaysShow</span>) &#123;</span><br><span class="line">    <span class="comment">// basePath: 一级菜单</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleOpen&#x27;</span>, <span class="variable language_">this</span>.<span class="property">basePath</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">menuLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 存在子菜单，并且不是打开状态的菜单，鼠标离开的时候需要合起来</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isNest</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">curMenuIsOpened</span>) &#123;</span><br><span class="line">    <span class="comment">// basePath: 一级菜单</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleClose&#x27;</span>, <span class="variable language_">this</span>.<span class="property">basePath</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>el-menu</code> 组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录系统的时候，记录展开的菜单信息，</span></span><br><span class="line"><span class="comment">// 在 mounted 里面获取 openedMenus ，并记录信息</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取当前展开的菜单 - array</span></span><br><span class="line">  <span class="comment">// 手风琴模式，只有一个展开菜单</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// openedMenus 是内部属性</span></span><br><span class="line">  <span class="keyword">const</span> &#123;openedMenus = []&#125; = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (openedMenus &amp;&amp; openedMenus.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取展开菜单的 index</span></span><br><span class="line">    <span class="keyword">const</span> index = openedMenus[<span class="number">0</span>];</span><br><span class="line">    sessionStorage.<span class="title function_">put</span>(<span class="string">&#x27;preActiveMenu&#x27;</span>, index)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">handleOpen</span>(<span class="params">indexPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 open 方法, 打开close,</span></span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">open</span>(indexPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClose</span>(<span class="params">indexPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 close 方法, 关闭close</span></span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">close</span>(indexPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handlerSelect</span>(<span class="params">index, indexPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 获取上次激活的菜单信息</span></span><br><span class="line">    <span class="keyword">const</span> _preActiveMenu = sessionStorage.<span class="title function_">get</span>(<span class="string">&#x27;preActiveMenu&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (_preActiveMenu) &#123;</span><br><span class="line">      <span class="comment">// 如果存在，则关闭该菜单，再打开新的</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">close</span>(_preActiveMenu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 记录这次激活的菜单信息</span></span><br><span class="line">    <span class="keyword">if</span> (indexPath.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      sessionStorage.<span class="title function_">put</span>(<span class="string">&#x27;preActiveMenu&#x27;</span>, indexPath[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h2><p><img src="https://pic.imgdb.cn/item/6311ec1816f2c2beb1164933.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用了<code>UI</code>框架之后就不可避免的会跟产品设计风格向左，这就需要在框架基础之上进行修改。框架也是一个个组件组成的，抓住组件设计的三要素：属性、事件、方法，了解框架组件的工作原理，就可以轻松的进行修改啦🎉🎉</p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我</strong>。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式浅析</title>
    <url>/blog/posts/3163405351.html</url>
    <content><![CDATA[<blockquote>
<p><strong>“单策代迭发命组，模享职中装适外”</strong></p>
</blockquote>
<h2 id="1-订阅-发布模式"><a href="#1-订阅-发布模式" class="headerlink" title="1.订阅-发布模式"></a>1.订阅-发布模式</h2><p>eventBus<br>vue的数据响应式原理就是基于发布订阅模式实现的</p>
<h2 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h2><p>简单来时就是把一写具有相关性的工具方法，组合起来，以方便调用和后期增删修等维护</p>
<ul>
<li>eg:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> operationType = &#123;</span><br><span class="line"><span class="string">&#x27;add&#x27;</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"><span class="string">&#x27;reduce&#x27;</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h2><p>譬如做一个全局的弹窗原型，当需要的时候就调用生成弹窗，但是没有必要实例化多个弹窗对象，只要实例化一次然后修改里面的属性参数就可以了</p>
<h2 id="4-装饰器模式Decorator"><a href="#4-装饰器模式Decorator" class="headerlink" title="4.装饰器模式Decorator"></a>4.装饰器模式Decorator</h2><p>原有的函数或组件不变，只是扩展、引用了一些方法<br>如：redux 中的@connect，增加了props,state… 使用就是@XX，（ng中的注解）</p>
<ul>
<li><p>eg: 就像是一个房子，进行装修（软装）</p>
</li>
<li><p>v-input, v-checkbox, 自定义指令</p>
</li>
<li><p>高阶组件，（相对于低阶组件来说，就是基础组件的二次封装，譬如业务组件：下拉搜索选择）</p>
</li>
</ul>
<h2 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5.代理模式"></a>5.代理模式</h2><p>为一个对象提供一个代用品或占位符，以便控制对它的访问<br>图片懒加载：先使用一个loading图，等图片加载好了，在放到img的src属性上</p>
<ul>
<li><p>函数防抖节流也是代理的一种</p>
</li>
<li><p>事件冒泡事件捕获</p>
</li>
</ul>
<h2 id="6-中介者模式"><a href="#6-中介者模式" class="headerlink" title="6.中介者模式"></a>6.中介者模式</h2><p><code>redux</code>和<code>vuex</code>都是中介者模式的实际应用，把共享数据抽离成一个单独的store，每个需要用到的组件都store这个中介来操作对象。</p>
<p>目的是减少耦合</p>
<h2 id="7-工厂模式"><a href="#7-工厂模式" class="headerlink" title="7.工厂模式"></a>7.工厂模式</h2><p>提供创建对象的接口，把对象的创建工作转交给一个外部对象。通俗的讲就是有一个模子，批量去生产。</p>
<p>目的是为了消除对象之间的耦合</p>
<ul>
<li>eg: 常见的弹窗，message, 对外提供调用方法，然后调用方法新建弹窗或实例化。</li>
</ul>
<h2 id="8-享元模式"><a href="#8-享元模式" class="headerlink" title="8.享元模式"></a>8.享元模式</h2><p>比方说一个工厂生产了50个男内衣和50个女内衣，想要找模特拍广告宣传，一般的只需要找一男一女就可以了，而而不是找50个男模特和50个女模特。用代码实现就是采用享元模式，衣服原型-实例化50个男内衣50个女内衣，人原型-实例化男人和女人，衣服和人的原型有相关关系，彼此通过对外提供接口以达到人和衣服结合，然后拍照。</p>
<p>再比如弹窗，创建一个弹窗原型对外提供接口，需要用到的时候直接调用传入不同的参数就可以了，没有必要实例化多次。<br>其实就是抽象化提取组件</p>
<h2 id="9-责任链模式（职责链模式）"><a href="#9-责任链模式（职责链模式）" class="headerlink" title="9.责任链模式（职责链模式）"></a>9.责任链模式（职责链模式）</h2><p>使得多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止，这就叫做职责链模式</p>
<ul>
<li><p>eg: node处理请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>电商预定商品，预定额500，实付减100；预定额200，实付减50。预定500的处理函数，预定200的处理函数，</p>
</li>
</ul>
<p>传入参数调用，处理函数依次进行捕捉拦截，如果不满足某一个处理函数的条件则放行到下一个处理函数，这样形成一个职责链。</p>
<p>后续若增加300的预定金额，直接编写预定额为300的处理函数，然后注册进责任链即可。</p>
<h2 id="10-适配器模式"><a href="#10-适配器模式" class="headerlink" title="10.适配器模式"></a>10.适配器模式</h2><p>常见的，后端接口返回的数据在前端不能直接使用，需要做转化，这个时候就使用到适配器模式</p>
<p>只关心输入输出数据，正向和反向，有点类似于webpack的loader(只关心输入输出)</p>
<p>小程序适配多平台</p>
<p>react-native 的 虚拟DOM转化——“桥接”</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li><p>创建设计模式：工厂，单例，建造者原型</p>
</li>
<li><p>结构化设计模式：外观，适配器，代理，装饰器，享元桥接，组合</p>
</li>
<li><p>行为型：策略，模板方法，观察者，迭代器，责任链，命令，备忘录，状态，访问者，终结者，解释器</p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
